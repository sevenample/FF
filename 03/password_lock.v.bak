module password_lock (
    input  logic        clk,
    input  logic        rst_n,
    input  logic [3:0]  sw,
    input  logic [2:0]  button,
    output logic [6:0]  seg [3:0],      // 四個 7-segment
    output logic [9:0]  led,
    output logic [2:0]  input_pos
);

    typedef enum logic [1:0] { IDLE, INPUT, CHECK, SUCCESS, FAIL } state_t;

    state_t state;
    logic [3:0] input_code [2:0];
    logic [1:0] index;
    logic [2:0] error_count;
    logic [3:0] display_char [3:0];

    localparam [11:0] CORRECT_CODE = 12'h520;

    always_ff @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            index <= 0;
            input_pos <= 0;
            error_count <= 0;
            led <= 0;
            state <= IDLE;
        end else begin
            case (state)
                IDLE: begin
                    if (button[2]) begin
                        input_code[0] <= sw;
                        index <= 1;
                        input_pos <= 1;
                        state <= INPUT;
                    end
                end
                INPUT: begin
                    if (button[2]) begin
                        input_code[index] <= sw;
                        index <= index + 1;
                        input_pos <= index + 1;
                        if (index == 2)
                            state <= CHECK;
                    end
                end
                CHECK: begin
                    input_pos <= 0;
                    if ({input_code[2], input_code[1], input_code[0]} == CORRECT_CODE) begin
                        led[3:0] <= 4'b1111;
                        state <= SUCCESS;
                    end else begin
                        error_count <= error_count + 1;
                        state <= FAIL;
                    end
                end
                SUCCESS: begin
                    display_char[3] <= 4'h0; // 'O'
                    display_char[2] <= 4'hP;
                    display_char[1] <= 4'hE;
                    display_char[0] <= 4'hN;
                end
                FAIL: begin
                    led[9] <= ~led[9]; // 閃爍
                    display_char[3] <= 4'hE;
                    display_char[2] <= 4'hR;
                    display_char[1] <= 4'hR;
                    display_char[0] <= error_count;
                end
            endcase
        end
    end

    // 使用 seg_decoder 將 display_char 編碼成 7-seg
    genvar i;
    generate
        for (i = 0; i < 4; i++) begin
            seg_decoder u_decoder (
                .char(display_char[i]),
                .seg(seg[i])
            );
        end
    endgenerate

endmodule
