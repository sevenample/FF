
12.elf:     file format elf32-littlenios2
12.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x028001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x02800000 paddr 0x02800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02800020 paddr 0x02800020 align 2**12
         filesz 0x00002844 memsz 0x00002844 flags r-x
    LOAD off    0x00003864 vaddr 0x02802864 paddr 0x02803e98 align 2**12
         filesz 0x00001634 memsz 0x00001634 flags rw-
    LOAD off    0x000054cc vaddr 0x028054cc paddr 0x028054cc align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02800000  02800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  02800020  02800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002680  028001b4  028001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000030  02802834  02802834  00003834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001634  02802864  02803e98  00003864  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  028054cc  028054cc  000054cc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00004e98  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000598  00000000  00000000  00004ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000843  00000000  00000000  00005458  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000a00e  00000000  00000000  00005c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000025dc  00000000  00000000  0000fca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006712  00000000  00000000  00012285  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000930  00000000  00000000  00018998  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000c35  00000000  00000000  000192c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000fe7  00000000  00000000  00019efd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0001aee4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  0001af28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001ca66  2**0
                  CONTENTS, READONLY
 18 .cpu          00000008  00000000  00000000  0001ca69  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001ca71  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001ca72  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0001ca73  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0001ca7c  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0001ca85  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  0001ca8e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000024  00000000  00000000  0001ca95  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0003b125  00000000  00000000  0001cab9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02800000 l    d  .entry	00000000 .entry
02800020 l    d  .exceptions	00000000 .exceptions
028001b4 l    d  .text	00000000 .text
02802834 l    d  .rodata	00000000 .rodata
02802864 l    d  .rwdata	00000000 .rwdata
028054cc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
028001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
0280031c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
02802864 l     O .rwdata	00001060 jtag_uart
0280049c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
028006dc l     F .text	00000228 altera_avalon_jtag_uart_irq
02800904 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
02801330 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
028013ac l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0280148c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0280189c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
028019ec l     F .text	000000f8 alt_file_locked
02801c70 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
02803a6c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
02802498 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-divmod.c
0280264c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
028027d0 l     F .text	00000040 alt_sim_halt
02800388 g     F .text	0000006c alt_main
028054e8 g     O .bss	00000100 alt_irq
02803e98 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
02800000 g     F .entry	0000000c __reset
02800020 g       *ABS*	00000000 __flash_exceptions_start
028054e4 g     O .bss	00000004 errno
028054d0 g     O .bss	00000004 alt_argv
0280be6c g       *ABS*	00000000 _gp
028003f4 g     F .text	00000030 usleep
028038ec g     O .rwdata	00000180 alt_fd_list
02801f0c g     F .text	00000094 alt_find_dev
02802250 g     F .text	000000a0 memcpy
02801974 g     F .text	00000078 alt_io_redirect
02802834 g       *ABS*	00000000 __DTOR_END__
02800b1c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02802788 g     F .text	00000008 __udivsi3
02803e7c g     O .rwdata	00000004 alt_max_fd
02803e94 g     O .rwdata	00000004 _global_impure_ptr
02805778 g       *ABS*	00000000 __bss_end
028017a4 g     F .text	000000f8 alt_iic_isr_register
02801de0 g     F .text	0000010c alt_tick
0280175c g     F .text	00000048 alt_ic_irq_enabled
02801d48 g     F .text	00000098 alt_alarm_stop
028054d8 g     O .bss	00000004 alt_irq_active
028000ec g     F .exceptions	000000c8 alt_irq_handler
028038c4 g     O .rwdata	00000028 alt_dev_null
02801390 g     F .text	0000001c alt_dcache_flush_all
02803e98 g       *ABS*	00000000 __ram_rwdata_end
02803e74 g     O .rwdata	00000008 alt_dev_list
02802864 g       *ABS*	00000000 __ram_rodata_end
02802790 g     F .text	00000008 __umodsi3
02805778 g       *ABS*	00000000 end
0280061c g     F .text	000000c0 altera_avalon_jtag_uart_init
02802830 g       *ABS*	00000000 __CTOR_LIST__
03000000 g       *ABS*	00000000 __alt_stack_pointer
02800d40 g     F .text	00000240 altera_avalon_jtag_uart_write
0280249c g     F .text	000001b0 __call_exitprocs
028001b4 g     F .text	0000003c _start
028054dc g     O .bss	00000004 _alt_tick_rate
028054e0 g     O .bss	00000004 _alt_nticks
02800458 g     F .text	00000044 alt_sys_init
02802364 g     F .text	00000134 __register_exitproc
028009b4 g     F .text	00000074 altera_avalon_jtag_uart_close
02802798 g     F .text	00000038 __mulsi3
02802864 g       *ABS*	00000000 __ram_rwdata_start
02802834 g       *ABS*	00000000 __ram_rodata_start
028004d4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
028020c0 g     F .text	000000d0 alt_get_fd
028010d4 g     F .text	0000015c alt_busy_sleep
02800000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
028021dc g     F .text	00000074 memcmp
02800584 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
02805778 g       *ABS*	00000000 __alt_stack_base
028005cc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
02801fa0 g     F .text	00000120 alt_find_file
028013d8 g     F .text	000000b4 alt_dev_llist_insert
028054cc g       *ABS*	00000000 __bss_start
028001f0 g     F .text	000000ac main
028054d4 g     O .bss	00000004 alt_envp
0280052c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
028055e8 g     O .bss	00000190 _atexit0
02803e80 g     O .rwdata	00000004 alt_errno
028026c8 g     F .text	00000060 __divsi3
02802834 g       *ABS*	00000000 __CTOR_END__
02802834 g       *ABS*	00000000 __flash_rodata_start
02802834 g       *ABS*	00000000 __DTOR_LIST__
02800424 g     F .text	00000034 alt_irq_init
02801cd0 g     F .text	00000078 alt_release_fd
02802190 g     F .text	00000014 atexit
02803e90 g     O .rwdata	00000004 _impure_ptr
028054cc g     O .bss	00000004 alt_argc
02801550 g     F .text	00000064 _do_dtors
02800020 g       .exceptions	00000000 alt_irq_entry
02803e6c g     O .rwdata	00000008 alt_fs_list
02800020 g       *ABS*	00000000 __ram_exceptions_start
028015d0 g     F .text	00000050 alt_ic_isr_register
02803e98 g       *ABS*	00000000 _edata
02805778 g       *ABS*	00000000 _end
028001b4 g       *ABS*	00000000 __ram_exceptions_end
02800a28 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
028016bc g     F .text	000000a0 alt_ic_irq_disable
02801eec g     F .text	00000020 altera_nios2_qsys_irq_init
028021a4 g     F .text	00000038 exit
02802728 g     F .text	00000060 __modsi3
03000000 g       *ABS*	00000000 __alt_data_end
02800020 g     F .exceptions	00000000 alt_exception
02802810 g     F .text	00000020 _exit
02800f80 g     F .text	00000154 alt_alarm_start
028022f0 g     F .text	00000074 strlen
02801ae4 g     F .text	0000018c open
028015b4 g     F .text	0000001c alt_icache_flush_all
02803e84 g     O .rwdata	00000004 alt_priority_mask
02801620 g     F .text	0000009c alt_ic_irq_enable
02803e88 g     O .rwdata	00000008 alt_alarm_list
028014ec g     F .text	00000064 _do_ctors
02801230 g     F .text	00000100 close
0280029c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

02800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2800000:	0040a034 	movhi	at,640
    ori r1, r1, %lo(_start)
 2800004:	08406d14 	ori	at,at,436
    jmp r1
 2800008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

02800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 280002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 280003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 280004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 280005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 280006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 280007c:	10000326 	beq	r2,zero,280008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2800080:	20000226 	beq	r4,zero,280008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2800084:	28000ec0 	call	28000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2800088:	00000306 	br	2800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 280008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 280009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 28000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 28000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 28000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 28000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 28000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 28000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 28000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 28000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 28000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 28000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 28000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 28000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 28000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 28000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 28000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 28000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 28000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 28000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 28000e8:	ef80083a 	eret

028000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 28000ec:	defff904 	addi	sp,sp,-28
 28000f0:	dfc00615 	stw	ra,24(sp)
 28000f4:	df000515 	stw	fp,20(sp)
 28000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 28000fc:	0005313a 	rdctl	r2,ipending
 2800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 280010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2800110:	00800044 	movi	r2,1
 2800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 2800118:	e0ffff17 	ldw	r3,-4(fp)
 280011c:	e0bffe17 	ldw	r2,-8(fp)
 2800120:	1884703a 	and	r2,r3,r2
 2800124:	1005003a 	cmpeq	r2,r2,zero
 2800128:	1000161e 	bne	r2,zero,2800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 280012c:	e0bffd17 	ldw	r2,-12(fp)
 2800130:	00c0a034 	movhi	r3,640
 2800134:	18d53a04 	addi	r3,r3,21736
 2800138:	100490fa 	slli	r2,r2,3
 280013c:	10c5883a 	add	r2,r2,r3
 2800140:	11400017 	ldw	r5,0(r2)
 2800144:	e0bffd17 	ldw	r2,-12(fp)
 2800148:	00c0a034 	movhi	r3,640
 280014c:	18d53a04 	addi	r3,r3,21736
 2800150:	100490fa 	slli	r2,r2,3
 2800154:	10c5883a 	add	r2,r2,r3
 2800158:	10800104 	addi	r2,r2,4
 280015c:	11000017 	ldw	r4,0(r2)
 2800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2800164:	0005313a 	rdctl	r2,ipending
 2800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 280016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2800174:	e0bfff17 	ldw	r2,-4(fp)
 2800178:	1004c03a 	cmpne	r2,r2,zero
 280017c:	103fe31e 	bne	r2,zero,280010c <alt_irq_handler+0x20>
 2800180:	00000706 	br	28001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2800184:	e0bffe17 	ldw	r2,-8(fp)
 2800188:	1085883a 	add	r2,r2,r2
 280018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2800190:	e0bffd17 	ldw	r2,-12(fp)
 2800194:	10800044 	addi	r2,r2,1
 2800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 280019c:	003fde06 	br	2800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 28001a0:	e037883a 	mov	sp,fp
 28001a4:	dfc00117 	ldw	ra,4(sp)
 28001a8:	df000017 	ldw	fp,0(sp)
 28001ac:	dec00204 	addi	sp,sp,8
 28001b0:	f800283a 	ret

Disassembly of section .text:

028001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 28001b4:	06c0c034 	movhi	sp,768
    ori sp, sp, %lo(__alt_stack_pointer)
 28001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 28001bc:	0680a034 	movhi	gp,640
    ori gp, gp, %lo(_gp)
 28001c0:	d6af9b14 	ori	gp,gp,48748
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 28001c4:	0080a034 	movhi	r2,640
    ori r2, r2, %lo(__bss_start)
 28001c8:	10953314 	ori	r2,r2,21708

    movhi r3, %hi(__bss_end)
 28001cc:	00c0a034 	movhi	r3,640
    ori r3, r3, %lo(__bss_end)
 28001d0:	18d5de14 	ori	r3,r3,22392

    beq r2, r3, 1f
 28001d4:	10c00326 	beq	r2,r3,28001e4 <_start+0x30>

0:
    stw zero, (r2)
 28001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 28001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 28001e0:	10fffd36 	bltu	r2,r3,28001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 28001e4:	280029c0 	call	280029c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 28001e8:	28003880 	call	2800388 <alt_main>

028001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 28001ec:	003fff06 	br	28001ec <alt_after_alt_main>

028001f0 <main>:
#include <system.h>
#include <io.h>
#include <unistd.h>

int main()
{
 28001f0:	defff404 	addi	sp,sp,-48
 28001f4:	dfc00b15 	stw	ra,44(sp)
 28001f8:	df000a15 	stw	fp,40(sp)
 28001fc:	df000a04 	addi	fp,sp,40
  int i=0;
 2800200:	e03ff615 	stw	zero,-40(fp)
  int hex[]={0x19,0x79,0x24,0x12,0x40,0x58,0x24,0x00,0x10};    //0x40,0 0x79,1  0x24,2  0x30,3  0x02,4  0x12,5  0x7D,6  0x58,7  0x00,8  0x10, 9
 2800204:	00800644 	movi	r2,25
 2800208:	e0bff715 	stw	r2,-36(fp)
 280020c:	00801e44 	movi	r2,121
 2800210:	e0bff815 	stw	r2,-32(fp)
 2800214:	00800904 	movi	r2,36
 2800218:	e0bff915 	stw	r2,-28(fp)
 280021c:	00800484 	movi	r2,18
 2800220:	e0bffa15 	stw	r2,-24(fp)
 2800224:	00801004 	movi	r2,64
 2800228:	e0bffb15 	stw	r2,-20(fp)
 280022c:	00801604 	movi	r2,88
 2800230:	e0bffc15 	stw	r2,-16(fp)
 2800234:	00800904 	movi	r2,36
 2800238:	e0bffd15 	stw	r2,-12(fp)
 280023c:	e03ffe15 	stw	zero,-8(fp)
 2800240:	00800404 	movi	r2,16
 2800244:	e0bfff15 	stw	r2,-4(fp)
  while(1){
	  for (i=0;i<10;i++){
 2800248:	e03ff615 	stw	zero,-40(fp)
 280024c:	00000f06 	br	280028c <main+0x9c>
		  IOWR(HEX_BASE,0,hex[i]);
 2800250:	e0bff617 	ldw	r2,-40(fp)
 2800254:	1085883a 	add	r2,r2,r2
 2800258:	1085883a 	add	r2,r2,r2
 280025c:	e0fff604 	addi	r3,fp,-40
 2800260:	10c5883a 	add	r2,r2,r3
 2800264:	10800104 	addi	r2,r2,4
 2800268:	10c00017 	ldw	r3,0(r2)
 280026c:	00800c04 	movi	r2,48
 2800270:	10c00035 	stwio	r3,0(r2)
		  usleep(100000);
 2800274:	010000b4 	movhi	r4,2
 2800278:	2121a804 	addi	r4,r4,-31072
 280027c:	28003f40 	call	28003f4 <usleep>
int main()
{
  int i=0;
  int hex[]={0x19,0x79,0x24,0x12,0x40,0x58,0x24,0x00,0x10};    //0x40,0 0x79,1  0x24,2  0x30,3  0x02,4  0x12,5  0x7D,6  0x58,7  0x00,8  0x10, 9
  while(1){
	  for (i=0;i<10;i++){
 2800280:	e0bff617 	ldw	r2,-40(fp)
 2800284:	10800044 	addi	r2,r2,1
 2800288:	e0bff615 	stw	r2,-40(fp)
 280028c:	e0bff617 	ldw	r2,-40(fp)
 2800290:	10800290 	cmplti	r2,r2,10
 2800294:	103fee1e 	bne	r2,zero,2800250 <main+0x60>
		  IOWR(HEX_BASE,0,hex[i]);
		  usleep(100000);
	  }
  }
 2800298:	003feb06 	br	2800248 <main+0x58>

0280029c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 280029c:	defffe04 	addi	sp,sp,-8
 28002a0:	dfc00115 	stw	ra,4(sp)
 28002a4:	df000015 	stw	fp,0(sp)
 28002a8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 28002ac:	0100a034 	movhi	r4,640
 28002b0:	210fa604 	addi	r4,r4,16024
 28002b4:	0140a034 	movhi	r5,640
 28002b8:	294a1904 	addi	r5,r5,10340
 28002bc:	0180a034 	movhi	r6,640
 28002c0:	318fa604 	addi	r6,r6,16024
 28002c4:	280031c0 	call	280031c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 28002c8:	0100a034 	movhi	r4,640
 28002cc:	21000804 	addi	r4,r4,32
 28002d0:	0140a034 	movhi	r5,640
 28002d4:	29400804 	addi	r5,r5,32
 28002d8:	0180a034 	movhi	r6,640
 28002dc:	31806d04 	addi	r6,r6,436
 28002e0:	280031c0 	call	280031c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 28002e4:	0100a034 	movhi	r4,640
 28002e8:	210a0d04 	addi	r4,r4,10292
 28002ec:	0140a034 	movhi	r5,640
 28002f0:	294a0d04 	addi	r5,r5,10292
 28002f4:	0180a034 	movhi	r6,640
 28002f8:	318a1904 	addi	r6,r6,10340
 28002fc:	280031c0 	call	280031c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2800300:	28013900 	call	2801390 <alt_dcache_flush_all>
  alt_icache_flush_all();
 2800304:	28015b40 	call	28015b4 <alt_icache_flush_all>
}
 2800308:	e037883a 	mov	sp,fp
 280030c:	dfc00117 	ldw	ra,4(sp)
 2800310:	df000017 	ldw	fp,0(sp)
 2800314:	dec00204 	addi	sp,sp,8
 2800318:	f800283a 	ret

0280031c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 280031c:	defffc04 	addi	sp,sp,-16
 2800320:	df000315 	stw	fp,12(sp)
 2800324:	df000304 	addi	fp,sp,12
 2800328:	e13ffd15 	stw	r4,-12(fp)
 280032c:	e17ffe15 	stw	r5,-8(fp)
 2800330:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 2800334:	e0fffe17 	ldw	r3,-8(fp)
 2800338:	e0bffd17 	ldw	r2,-12(fp)
 280033c:	18800e26 	beq	r3,r2,2800378 <alt_load_section+0x5c>
  {
    while( to != end )
 2800340:	00000a06 	br	280036c <alt_load_section+0x50>
    {
      *to++ = *from++;
 2800344:	e0bffd17 	ldw	r2,-12(fp)
 2800348:	10c00017 	ldw	r3,0(r2)
 280034c:	e0bffe17 	ldw	r2,-8(fp)
 2800350:	10c00015 	stw	r3,0(r2)
 2800354:	e0bffe17 	ldw	r2,-8(fp)
 2800358:	10800104 	addi	r2,r2,4
 280035c:	e0bffe15 	stw	r2,-8(fp)
 2800360:	e0bffd17 	ldw	r2,-12(fp)
 2800364:	10800104 	addi	r2,r2,4
 2800368:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 280036c:	e0fffe17 	ldw	r3,-8(fp)
 2800370:	e0bfff17 	ldw	r2,-4(fp)
 2800374:	18bff31e 	bne	r3,r2,2800344 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 2800378:	e037883a 	mov	sp,fp
 280037c:	df000017 	ldw	fp,0(sp)
 2800380:	dec00104 	addi	sp,sp,4
 2800384:	f800283a 	ret

02800388 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2800388:	defffd04 	addi	sp,sp,-12
 280038c:	dfc00215 	stw	ra,8(sp)
 2800390:	df000115 	stw	fp,4(sp)
 2800394:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2800398:	0009883a 	mov	r4,zero
 280039c:	28004240 	call	2800424 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 28003a0:	28004580 	call	2800458 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 28003a4:	0100a034 	movhi	r4,640
 28003a8:	210a0d04 	addi	r4,r4,10292
 28003ac:	0140a034 	movhi	r5,640
 28003b0:	294a0d04 	addi	r5,r5,10292
 28003b4:	0180a034 	movhi	r6,640
 28003b8:	318a0d04 	addi	r6,r6,10292
 28003bc:	28019740 	call	2801974 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 28003c0:	28014ec0 	call	28014ec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 28003c4:	0100a034 	movhi	r4,640
 28003c8:	21055404 	addi	r4,r4,5456
 28003cc:	28021900 	call	2802190 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 28003d0:	d1259817 	ldw	r4,-27040(gp)
 28003d4:	d1659917 	ldw	r5,-27036(gp)
 28003d8:	d1a59a17 	ldw	r6,-27032(gp)
 28003dc:	28001f00 	call	28001f0 <main>
 28003e0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 28003e4:	01000044 	movi	r4,1
 28003e8:	28012300 	call	2801230 <close>
  exit (result);
 28003ec:	e13fff17 	ldw	r4,-4(fp)
 28003f0:	28021a40 	call	28021a4 <exit>

028003f4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 28003f4:	defffd04 	addi	sp,sp,-12
 28003f8:	dfc00215 	stw	ra,8(sp)
 28003fc:	df000115 	stw	fp,4(sp)
 2800400:	df000104 	addi	fp,sp,4
 2800404:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 2800408:	e13fff17 	ldw	r4,-4(fp)
 280040c:	28010d40 	call	28010d4 <alt_busy_sleep>
}
 2800410:	e037883a 	mov	sp,fp
 2800414:	dfc00117 	ldw	ra,4(sp)
 2800418:	df000017 	ldw	fp,0(sp)
 280041c:	dec00204 	addi	sp,sp,8
 2800420:	f800283a 	ret

02800424 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2800424:	defffd04 	addi	sp,sp,-12
 2800428:	dfc00215 	stw	ra,8(sp)
 280042c:	df000115 	stw	fp,4(sp)
 2800430:	df000104 	addi	fp,sp,4
 2800434:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2CPU, nios2cpu);
 2800438:	2801eec0 	call	2801eec <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 280043c:	00800044 	movi	r2,1
 2800440:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2800444:	e037883a 	mov	sp,fp
 2800448:	dfc00117 	ldw	ra,4(sp)
 280044c:	df000017 	ldw	fp,0(sp)
 2800450:	dec00204 	addi	sp,sp,8
 2800454:	f800283a 	ret

02800458 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2800458:	defffe04 	addi	sp,sp,-8
 280045c:	dfc00115 	stw	ra,4(sp)
 2800460:	df000015 	stw	fp,0(sp)
 2800464:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 2800468:	0100a034 	movhi	r4,640
 280046c:	210a2304 	addi	r4,r4,10380
 2800470:	000b883a 	mov	r5,zero
 2800474:	01800044 	movi	r6,1
 2800478:	280061c0 	call	280061c <altera_avalon_jtag_uart_init>
 280047c:	0100a034 	movhi	r4,640
 2800480:	210a1904 	addi	r4,r4,10340
 2800484:	280049c0 	call	280049c <alt_dev_reg>
}
 2800488:	e037883a 	mov	sp,fp
 280048c:	dfc00117 	ldw	ra,4(sp)
 2800490:	df000017 	ldw	fp,0(sp)
 2800494:	dec00204 	addi	sp,sp,8
 2800498:	f800283a 	ret

0280049c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 280049c:	defffd04 	addi	sp,sp,-12
 28004a0:	dfc00215 	stw	ra,8(sp)
 28004a4:	df000115 	stw	fp,4(sp)
 28004a8:	df000104 	addi	fp,sp,4
 28004ac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 28004b0:	e13fff17 	ldw	r4,-4(fp)
 28004b4:	0140a034 	movhi	r5,640
 28004b8:	294f9d04 	addi	r5,r5,15988
 28004bc:	28013d80 	call	28013d8 <alt_dev_llist_insert>
}
 28004c0:	e037883a 	mov	sp,fp
 28004c4:	dfc00117 	ldw	ra,4(sp)
 28004c8:	df000017 	ldw	fp,0(sp)
 28004cc:	dec00204 	addi	sp,sp,8
 28004d0:	f800283a 	ret

028004d4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 28004d4:	defffa04 	addi	sp,sp,-24
 28004d8:	dfc00515 	stw	ra,20(sp)
 28004dc:	df000415 	stw	fp,16(sp)
 28004e0:	df000404 	addi	fp,sp,16
 28004e4:	e13ffd15 	stw	r4,-12(fp)
 28004e8:	e17ffe15 	stw	r5,-8(fp)
 28004ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 28004f0:	e0bffd17 	ldw	r2,-12(fp)
 28004f4:	10800017 	ldw	r2,0(r2)
 28004f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 28004fc:	e0bffc17 	ldw	r2,-16(fp)
 2800500:	11000a04 	addi	r4,r2,40
 2800504:	e0bffd17 	ldw	r2,-12(fp)
 2800508:	11c00217 	ldw	r7,8(r2)
 280050c:	e17ffe17 	ldw	r5,-8(fp)
 2800510:	e1bfff17 	ldw	r6,-4(fp)
 2800514:	2800b1c0 	call	2800b1c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2800518:	e037883a 	mov	sp,fp
 280051c:	dfc00117 	ldw	ra,4(sp)
 2800520:	df000017 	ldw	fp,0(sp)
 2800524:	dec00204 	addi	sp,sp,8
 2800528:	f800283a 	ret

0280052c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 280052c:	defffa04 	addi	sp,sp,-24
 2800530:	dfc00515 	stw	ra,20(sp)
 2800534:	df000415 	stw	fp,16(sp)
 2800538:	df000404 	addi	fp,sp,16
 280053c:	e13ffd15 	stw	r4,-12(fp)
 2800540:	e17ffe15 	stw	r5,-8(fp)
 2800544:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2800548:	e0bffd17 	ldw	r2,-12(fp)
 280054c:	10800017 	ldw	r2,0(r2)
 2800550:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2800554:	e0bffc17 	ldw	r2,-16(fp)
 2800558:	11000a04 	addi	r4,r2,40
 280055c:	e0bffd17 	ldw	r2,-12(fp)
 2800560:	11c00217 	ldw	r7,8(r2)
 2800564:	e17ffe17 	ldw	r5,-8(fp)
 2800568:	e1bfff17 	ldw	r6,-4(fp)
 280056c:	2800d400 	call	2800d40 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2800570:	e037883a 	mov	sp,fp
 2800574:	dfc00117 	ldw	ra,4(sp)
 2800578:	df000017 	ldw	fp,0(sp)
 280057c:	dec00204 	addi	sp,sp,8
 2800580:	f800283a 	ret

02800584 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2800584:	defffc04 	addi	sp,sp,-16
 2800588:	dfc00315 	stw	ra,12(sp)
 280058c:	df000215 	stw	fp,8(sp)
 2800590:	df000204 	addi	fp,sp,8
 2800594:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2800598:	e0bfff17 	ldw	r2,-4(fp)
 280059c:	10800017 	ldw	r2,0(r2)
 28005a0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 28005a4:	e0bffe17 	ldw	r2,-8(fp)
 28005a8:	11000a04 	addi	r4,r2,40
 28005ac:	e0bfff17 	ldw	r2,-4(fp)
 28005b0:	11400217 	ldw	r5,8(r2)
 28005b4:	28009b40 	call	28009b4 <altera_avalon_jtag_uart_close>
}
 28005b8:	e037883a 	mov	sp,fp
 28005bc:	dfc00117 	ldw	ra,4(sp)
 28005c0:	df000017 	ldw	fp,0(sp)
 28005c4:	dec00204 	addi	sp,sp,8
 28005c8:	f800283a 	ret

028005cc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 28005cc:	defffa04 	addi	sp,sp,-24
 28005d0:	dfc00515 	stw	ra,20(sp)
 28005d4:	df000415 	stw	fp,16(sp)
 28005d8:	df000404 	addi	fp,sp,16
 28005dc:	e13ffd15 	stw	r4,-12(fp)
 28005e0:	e17ffe15 	stw	r5,-8(fp)
 28005e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 28005e8:	e0bffd17 	ldw	r2,-12(fp)
 28005ec:	10800017 	ldw	r2,0(r2)
 28005f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 28005f4:	e0bffc17 	ldw	r2,-16(fp)
 28005f8:	11000a04 	addi	r4,r2,40
 28005fc:	e17ffe17 	ldw	r5,-8(fp)
 2800600:	e1bfff17 	ldw	r6,-4(fp)
 2800604:	2800a280 	call	2800a28 <altera_avalon_jtag_uart_ioctl>
}
 2800608:	e037883a 	mov	sp,fp
 280060c:	dfc00117 	ldw	ra,4(sp)
 2800610:	df000017 	ldw	fp,0(sp)
 2800614:	dec00204 	addi	sp,sp,8
 2800618:	f800283a 	ret

0280061c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 280061c:	defffa04 	addi	sp,sp,-24
 2800620:	dfc00515 	stw	ra,20(sp)
 2800624:	df000415 	stw	fp,16(sp)
 2800628:	df000404 	addi	fp,sp,16
 280062c:	e13ffd15 	stw	r4,-12(fp)
 2800630:	e17ffe15 	stw	r5,-8(fp)
 2800634:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2800638:	e0fffd17 	ldw	r3,-12(fp)
 280063c:	00800044 	movi	r2,1
 2800640:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2800644:	e0bffd17 	ldw	r2,-12(fp)
 2800648:	10800017 	ldw	r2,0(r2)
 280064c:	11000104 	addi	r4,r2,4
 2800650:	e0bffd17 	ldw	r2,-12(fp)
 2800654:	10800817 	ldw	r2,32(r2)
 2800658:	1007883a 	mov	r3,r2
 280065c:	2005883a 	mov	r2,r4
 2800660:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 2800664:	e13ffe17 	ldw	r4,-8(fp)
 2800668:	e17fff17 	ldw	r5,-4(fp)
 280066c:	d8000015 	stw	zero,0(sp)
 2800670:	0180a034 	movhi	r6,640
 2800674:	3181b704 	addi	r6,r6,1756
 2800678:	e1fffd17 	ldw	r7,-12(fp)
 280067c:	28015d00 	call	28015d0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2800680:	e0bffd17 	ldw	r2,-12(fp)
 2800684:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2800688:	e0bffd17 	ldw	r2,-12(fp)
 280068c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2800690:	0080a034 	movhi	r2,640
 2800694:	10953704 	addi	r2,r2,21724
 2800698:	10800017 	ldw	r2,0(r2)
 280069c:	100b883a 	mov	r5,r2
 28006a0:	0180a034 	movhi	r6,640
 28006a4:	31824104 	addi	r6,r6,2308
 28006a8:	e1fffd17 	ldw	r7,-12(fp)
 28006ac:	2800f800 	call	2800f80 <alt_alarm_start>
 28006b0:	1004403a 	cmpge	r2,r2,zero
 28006b4:	1000041e 	bne	r2,zero,28006c8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 28006b8:	e0fffd17 	ldw	r3,-12(fp)
 28006bc:	00a00034 	movhi	r2,32768
 28006c0:	10bfffc4 	addi	r2,r2,-1
 28006c4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 28006c8:	e037883a 	mov	sp,fp
 28006cc:	dfc00117 	ldw	ra,4(sp)
 28006d0:	df000017 	ldw	fp,0(sp)
 28006d4:	dec00204 	addi	sp,sp,8
 28006d8:	f800283a 	ret

028006dc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 28006dc:	defff804 	addi	sp,sp,-32
 28006e0:	df000715 	stw	fp,28(sp)
 28006e4:	df000704 	addi	fp,sp,28
 28006e8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 28006ec:	e0bfff17 	ldw	r2,-4(fp)
 28006f0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 28006f4:	e0bffe17 	ldw	r2,-8(fp)
 28006f8:	10800017 	ldw	r2,0(r2)
 28006fc:	e0bffd15 	stw	r2,-12(fp)
 2800700:	00000006 	br	2800704 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2800704:	e0bffd17 	ldw	r2,-12(fp)
 2800708:	10800104 	addi	r2,r2,4
 280070c:	10800037 	ldwio	r2,0(r2)
 2800710:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2800714:	e0bffc17 	ldw	r2,-16(fp)
 2800718:	1080c00c 	andi	r2,r2,768
 280071c:	1005003a 	cmpeq	r2,r2,zero
 2800720:	1000741e 	bne	r2,zero,28008f4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2800724:	e0bffc17 	ldw	r2,-16(fp)
 2800728:	1080400c 	andi	r2,r2,256
 280072c:	1005003a 	cmpeq	r2,r2,zero
 2800730:	1000351e 	bne	r2,zero,2800808 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2800734:	00800074 	movhi	r2,1
 2800738:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 280073c:	e0bffe17 	ldw	r2,-8(fp)
 2800740:	10800a17 	ldw	r2,40(r2)
 2800744:	10800044 	addi	r2,r2,1
 2800748:	1081ffcc 	andi	r2,r2,2047
 280074c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 2800750:	e0bffe17 	ldw	r2,-8(fp)
 2800754:	10c00b17 	ldw	r3,44(r2)
 2800758:	e0bffa17 	ldw	r2,-24(fp)
 280075c:	18801626 	beq	r3,r2,28007b8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2800760:	e0bffd17 	ldw	r2,-12(fp)
 2800764:	10800037 	ldwio	r2,0(r2)
 2800768:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 280076c:	e0bffb17 	ldw	r2,-20(fp)
 2800770:	10a0000c 	andi	r2,r2,32768
 2800774:	1005003a 	cmpeq	r2,r2,zero
 2800778:	10000f1e 	bne	r2,zero,28007b8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 280077c:	e0bffe17 	ldw	r2,-8(fp)
 2800780:	10c00a17 	ldw	r3,40(r2)
 2800784:	e0bffb17 	ldw	r2,-20(fp)
 2800788:	1009883a 	mov	r4,r2
 280078c:	e0bffe17 	ldw	r2,-8(fp)
 2800790:	1885883a 	add	r2,r3,r2
 2800794:	10800e04 	addi	r2,r2,56
 2800798:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 280079c:	e0bffe17 	ldw	r2,-8(fp)
 28007a0:	10800a17 	ldw	r2,40(r2)
 28007a4:	10800044 	addi	r2,r2,1
 28007a8:	10c1ffcc 	andi	r3,r2,2047
 28007ac:	e0bffe17 	ldw	r2,-8(fp)
 28007b0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 28007b4:	003fe106 	br	280073c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 28007b8:	e0bffb17 	ldw	r2,-20(fp)
 28007bc:	10bfffec 	andhi	r2,r2,65535
 28007c0:	1005003a 	cmpeq	r2,r2,zero
 28007c4:	1000101e 	bne	r2,zero,2800808 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 28007c8:	e0bffe17 	ldw	r2,-8(fp)
 28007cc:	10c00817 	ldw	r3,32(r2)
 28007d0:	00bfff84 	movi	r2,-2
 28007d4:	1886703a 	and	r3,r3,r2
 28007d8:	e0bffe17 	ldw	r2,-8(fp)
 28007dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 28007e0:	e0bffd17 	ldw	r2,-12(fp)
 28007e4:	11000104 	addi	r4,r2,4
 28007e8:	e0bffe17 	ldw	r2,-8(fp)
 28007ec:	10800817 	ldw	r2,32(r2)
 28007f0:	1007883a 	mov	r3,r2
 28007f4:	2005883a 	mov	r2,r4
 28007f8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 28007fc:	e0bffd17 	ldw	r2,-12(fp)
 2800800:	10800104 	addi	r2,r2,4
 2800804:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2800808:	e0bffc17 	ldw	r2,-16(fp)
 280080c:	1080800c 	andi	r2,r2,512
 2800810:	1005003a 	cmpeq	r2,r2,zero
 2800814:	103fbb1e 	bne	r2,zero,2800704 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2800818:	e0bffc17 	ldw	r2,-16(fp)
 280081c:	10bfffec 	andhi	r2,r2,65535
 2800820:	1004d43a 	srli	r2,r2,16
 2800824:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2800828:	00001506 	br	2800880 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 280082c:	e13ffd17 	ldw	r4,-12(fp)
 2800830:	e0bffe17 	ldw	r2,-8(fp)
 2800834:	10c00d17 	ldw	r3,52(r2)
 2800838:	e0bffe17 	ldw	r2,-8(fp)
 280083c:	1885883a 	add	r2,r3,r2
 2800840:	10820e04 	addi	r2,r2,2104
 2800844:	10800003 	ldbu	r2,0(r2)
 2800848:	10c03fcc 	andi	r3,r2,255
 280084c:	18c0201c 	xori	r3,r3,128
 2800850:	18ffe004 	addi	r3,r3,-128
 2800854:	2005883a 	mov	r2,r4
 2800858:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 280085c:	e0bffe17 	ldw	r2,-8(fp)
 2800860:	10800d17 	ldw	r2,52(r2)
 2800864:	10800044 	addi	r2,r2,1
 2800868:	10c1ffcc 	andi	r3,r2,2047
 280086c:	e0bffe17 	ldw	r2,-8(fp)
 2800870:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 2800874:	e0bff917 	ldw	r2,-28(fp)
 2800878:	10bfffc4 	addi	r2,r2,-1
 280087c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2800880:	e0bff917 	ldw	r2,-28(fp)
 2800884:	1005003a 	cmpeq	r2,r2,zero
 2800888:	1000051e 	bne	r2,zero,28008a0 <altera_avalon_jtag_uart_irq+0x1c4>
 280088c:	e0bffe17 	ldw	r2,-8(fp)
 2800890:	10c00d17 	ldw	r3,52(r2)
 2800894:	e0bffe17 	ldw	r2,-8(fp)
 2800898:	10800c17 	ldw	r2,48(r2)
 280089c:	18bfe31e 	bne	r3,r2,280082c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 28008a0:	e0bff917 	ldw	r2,-28(fp)
 28008a4:	1005003a 	cmpeq	r2,r2,zero
 28008a8:	103f961e 	bne	r2,zero,2800704 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 28008ac:	e0bffe17 	ldw	r2,-8(fp)
 28008b0:	10c00817 	ldw	r3,32(r2)
 28008b4:	00bfff44 	movi	r2,-3
 28008b8:	1886703a 	and	r3,r3,r2
 28008bc:	e0bffe17 	ldw	r2,-8(fp)
 28008c0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 28008c4:	e0bffe17 	ldw	r2,-8(fp)
 28008c8:	10800017 	ldw	r2,0(r2)
 28008cc:	11000104 	addi	r4,r2,4
 28008d0:	e0bffe17 	ldw	r2,-8(fp)
 28008d4:	10800817 	ldw	r2,32(r2)
 28008d8:	1007883a 	mov	r3,r2
 28008dc:	2005883a 	mov	r2,r4
 28008e0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 28008e4:	e0bffd17 	ldw	r2,-12(fp)
 28008e8:	10800104 	addi	r2,r2,4
 28008ec:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 28008f0:	003f8406 	br	2800704 <altera_avalon_jtag_uart_irq+0x28>
}
 28008f4:	e037883a 	mov	sp,fp
 28008f8:	df000017 	ldw	fp,0(sp)
 28008fc:	dec00104 	addi	sp,sp,4
 2800900:	f800283a 	ret

02800904 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2800904:	defffc04 	addi	sp,sp,-16
 2800908:	df000315 	stw	fp,12(sp)
 280090c:	df000304 	addi	fp,sp,12
 2800910:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2800914:	e0bfff17 	ldw	r2,-4(fp)
 2800918:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 280091c:	e0bffe17 	ldw	r2,-8(fp)
 2800920:	10800017 	ldw	r2,0(r2)
 2800924:	10800104 	addi	r2,r2,4
 2800928:	10800037 	ldwio	r2,0(r2)
 280092c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2800930:	e0bffd17 	ldw	r2,-12(fp)
 2800934:	1081000c 	andi	r2,r2,1024
 2800938:	1005003a 	cmpeq	r2,r2,zero
 280093c:	10000c1e 	bne	r2,zero,2800970 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2800940:	e0bffe17 	ldw	r2,-8(fp)
 2800944:	10800017 	ldw	r2,0(r2)
 2800948:	11000104 	addi	r4,r2,4
 280094c:	e0bffe17 	ldw	r2,-8(fp)
 2800950:	10800817 	ldw	r2,32(r2)
 2800954:	10810014 	ori	r2,r2,1024
 2800958:	1007883a 	mov	r3,r2
 280095c:	2005883a 	mov	r2,r4
 2800960:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 2800964:	e0bffe17 	ldw	r2,-8(fp)
 2800968:	10000915 	stw	zero,36(r2)
 280096c:	00000a06 	br	2800998 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2800970:	e0bffe17 	ldw	r2,-8(fp)
 2800974:	10c00917 	ldw	r3,36(r2)
 2800978:	00a00034 	movhi	r2,32768
 280097c:	10bfff04 	addi	r2,r2,-4
 2800980:	10c00536 	bltu	r2,r3,2800998 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 2800984:	e0bffe17 	ldw	r2,-8(fp)
 2800988:	10800917 	ldw	r2,36(r2)
 280098c:	10c00044 	addi	r3,r2,1
 2800990:	e0bffe17 	ldw	r2,-8(fp)
 2800994:	10c00915 	stw	r3,36(r2)
 2800998:	0080a034 	movhi	r2,640
 280099c:	10953704 	addi	r2,r2,21724
 28009a0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 28009a4:	e037883a 	mov	sp,fp
 28009a8:	df000017 	ldw	fp,0(sp)
 28009ac:	dec00104 	addi	sp,sp,4
 28009b0:	f800283a 	ret

028009b4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 28009b4:	defffc04 	addi	sp,sp,-16
 28009b8:	df000315 	stw	fp,12(sp)
 28009bc:	df000304 	addi	fp,sp,12
 28009c0:	e13ffd15 	stw	r4,-12(fp)
 28009c4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 28009c8:	00000706 	br	28009e8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 28009cc:	e0bffe17 	ldw	r2,-8(fp)
 28009d0:	1090000c 	andi	r2,r2,16384
 28009d4:	1005003a 	cmpeq	r2,r2,zero
 28009d8:	1000031e 	bne	r2,zero,28009e8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 28009dc:	00bffd44 	movi	r2,-11
 28009e0:	e0bfff15 	stw	r2,-4(fp)
 28009e4:	00000b06 	br	2800a14 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 28009e8:	e0bffd17 	ldw	r2,-12(fp)
 28009ec:	10c00d17 	ldw	r3,52(r2)
 28009f0:	e0bffd17 	ldw	r2,-12(fp)
 28009f4:	10800c17 	ldw	r2,48(r2)
 28009f8:	18800526 	beq	r3,r2,2800a10 <altera_avalon_jtag_uart_close+0x5c>
 28009fc:	e0bffd17 	ldw	r2,-12(fp)
 2800a00:	10c00917 	ldw	r3,36(r2)
 2800a04:	e0bffd17 	ldw	r2,-12(fp)
 2800a08:	10800117 	ldw	r2,4(r2)
 2800a0c:	18bfef36 	bltu	r3,r2,28009cc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2800a10:	e03fff15 	stw	zero,-4(fp)
 2800a14:	e0bfff17 	ldw	r2,-4(fp)
}
 2800a18:	e037883a 	mov	sp,fp
 2800a1c:	df000017 	ldw	fp,0(sp)
 2800a20:	dec00104 	addi	sp,sp,4
 2800a24:	f800283a 	ret

02800a28 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2800a28:	defff804 	addi	sp,sp,-32
 2800a2c:	df000715 	stw	fp,28(sp)
 2800a30:	df000704 	addi	fp,sp,28
 2800a34:	e13ffb15 	stw	r4,-20(fp)
 2800a38:	e17ffc15 	stw	r5,-16(fp)
 2800a3c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 2800a40:	00bff9c4 	movi	r2,-25
 2800a44:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 2800a48:	e0bffc17 	ldw	r2,-16(fp)
 2800a4c:	e0bfff15 	stw	r2,-4(fp)
 2800a50:	e0ffff17 	ldw	r3,-4(fp)
 2800a54:	189a8060 	cmpeqi	r2,r3,27137
 2800a58:	1000041e 	bne	r2,zero,2800a6c <altera_avalon_jtag_uart_ioctl+0x44>
 2800a5c:	e0ffff17 	ldw	r3,-4(fp)
 2800a60:	189a80a0 	cmpeqi	r2,r3,27138
 2800a64:	10001b1e 	bne	r2,zero,2800ad4 <altera_avalon_jtag_uart_ioctl+0xac>
 2800a68:	00002706 	br	2800b08 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2800a6c:	e0bffb17 	ldw	r2,-20(fp)
 2800a70:	10c00117 	ldw	r3,4(r2)
 2800a74:	00a00034 	movhi	r2,32768
 2800a78:	10bfffc4 	addi	r2,r2,-1
 2800a7c:	18802226 	beq	r3,r2,2800b08 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 2800a80:	e0bffd17 	ldw	r2,-12(fp)
 2800a84:	10800017 	ldw	r2,0(r2)
 2800a88:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2800a8c:	e0bff917 	ldw	r2,-28(fp)
 2800a90:	10800090 	cmplti	r2,r2,2
 2800a94:	1000071e 	bne	r2,zero,2800ab4 <altera_avalon_jtag_uart_ioctl+0x8c>
 2800a98:	e0fff917 	ldw	r3,-28(fp)
 2800a9c:	00a00034 	movhi	r2,32768
 2800aa0:	10bfffc4 	addi	r2,r2,-1
 2800aa4:	18800326 	beq	r3,r2,2800ab4 <altera_avalon_jtag_uart_ioctl+0x8c>
 2800aa8:	e0bff917 	ldw	r2,-28(fp)
 2800aac:	e0bffe15 	stw	r2,-8(fp)
 2800ab0:	00000306 	br	2800ac0 <altera_avalon_jtag_uart_ioctl+0x98>
 2800ab4:	00e00034 	movhi	r3,32768
 2800ab8:	18ffff84 	addi	r3,r3,-2
 2800abc:	e0fffe15 	stw	r3,-8(fp)
 2800ac0:	e0bffb17 	ldw	r2,-20(fp)
 2800ac4:	e0fffe17 	ldw	r3,-8(fp)
 2800ac8:	10c00115 	stw	r3,4(r2)
      rc = 0;
 2800acc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 2800ad0:	00000d06 	br	2800b08 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2800ad4:	e0bffb17 	ldw	r2,-20(fp)
 2800ad8:	10c00117 	ldw	r3,4(r2)
 2800adc:	00a00034 	movhi	r2,32768
 2800ae0:	10bfffc4 	addi	r2,r2,-1
 2800ae4:	18800826 	beq	r3,r2,2800b08 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2800ae8:	e13ffd17 	ldw	r4,-12(fp)
 2800aec:	e0bffb17 	ldw	r2,-20(fp)
 2800af0:	10c00917 	ldw	r3,36(r2)
 2800af4:	e0bffb17 	ldw	r2,-20(fp)
 2800af8:	10800117 	ldw	r2,4(r2)
 2800afc:	1885803a 	cmpltu	r2,r3,r2
 2800b00:	20800015 	stw	r2,0(r4)
      rc = 0;
 2800b04:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 2800b08:	e0bffa17 	ldw	r2,-24(fp)
}
 2800b0c:	e037883a 	mov	sp,fp
 2800b10:	df000017 	ldw	fp,0(sp)
 2800b14:	dec00104 	addi	sp,sp,4
 2800b18:	f800283a 	ret

02800b1c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2800b1c:	defff204 	addi	sp,sp,-56
 2800b20:	dfc00d15 	stw	ra,52(sp)
 2800b24:	df000c15 	stw	fp,48(sp)
 2800b28:	df000c04 	addi	fp,sp,48
 2800b2c:	e13ffb15 	stw	r4,-20(fp)
 2800b30:	e17ffc15 	stw	r5,-16(fp)
 2800b34:	e1bffd15 	stw	r6,-12(fp)
 2800b38:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 2800b3c:	e0bffc17 	ldw	r2,-16(fp)
 2800b40:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2800b44:	00004806 	br	2800c68 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2800b48:	e0bffb17 	ldw	r2,-20(fp)
 2800b4c:	10800a17 	ldw	r2,40(r2)
 2800b50:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 2800b54:	e0bffb17 	ldw	r2,-20(fp)
 2800b58:	10800b17 	ldw	r2,44(r2)
 2800b5c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 2800b60:	e0fff717 	ldw	r3,-36(fp)
 2800b64:	e0bff617 	ldw	r2,-40(fp)
 2800b68:	18800536 	bltu	r3,r2,2800b80 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 2800b6c:	e0bff717 	ldw	r2,-36(fp)
 2800b70:	e0fff617 	ldw	r3,-40(fp)
 2800b74:	10c5c83a 	sub	r2,r2,r3
 2800b78:	e0bff815 	stw	r2,-32(fp)
 2800b7c:	00000406 	br	2800b90 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2800b80:	00820004 	movi	r2,2048
 2800b84:	e0fff617 	ldw	r3,-40(fp)
 2800b88:	10c5c83a 	sub	r2,r2,r3
 2800b8c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 2800b90:	e0bff817 	ldw	r2,-32(fp)
 2800b94:	1005003a 	cmpeq	r2,r2,zero
 2800b98:	10001f1e 	bne	r2,zero,2800c18 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 2800b9c:	e0fffd17 	ldw	r3,-12(fp)
 2800ba0:	e0bff817 	ldw	r2,-32(fp)
 2800ba4:	1880022e 	bgeu	r3,r2,2800bb0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 2800ba8:	e0bffd17 	ldw	r2,-12(fp)
 2800bac:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2800bb0:	e0bffb17 	ldw	r2,-20(fp)
 2800bb4:	10c00e04 	addi	r3,r2,56
 2800bb8:	e0bff617 	ldw	r2,-40(fp)
 2800bbc:	1887883a 	add	r3,r3,r2
 2800bc0:	e0bffa17 	ldw	r2,-24(fp)
 2800bc4:	1009883a 	mov	r4,r2
 2800bc8:	180b883a 	mov	r5,r3
 2800bcc:	e1bff817 	ldw	r6,-32(fp)
 2800bd0:	28022500 	call	2802250 <memcpy>
      ptr   += n;
 2800bd4:	e0fff817 	ldw	r3,-32(fp)
 2800bd8:	e0bffa17 	ldw	r2,-24(fp)
 2800bdc:	10c5883a 	add	r2,r2,r3
 2800be0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 2800be4:	e0fffd17 	ldw	r3,-12(fp)
 2800be8:	e0bff817 	ldw	r2,-32(fp)
 2800bec:	1885c83a 	sub	r2,r3,r2
 2800bf0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2800bf4:	e0fff617 	ldw	r3,-40(fp)
 2800bf8:	e0bff817 	ldw	r2,-32(fp)
 2800bfc:	1885883a 	add	r2,r3,r2
 2800c00:	10c1ffcc 	andi	r3,r2,2047
 2800c04:	e0bffb17 	ldw	r2,-20(fp)
 2800c08:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2800c0c:	e0bffd17 	ldw	r2,-12(fp)
 2800c10:	10800048 	cmpgei	r2,r2,1
 2800c14:	103fcc1e 	bne	r2,zero,2800b48 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 2800c18:	e0fffa17 	ldw	r3,-24(fp)
 2800c1c:	e0bffc17 	ldw	r2,-16(fp)
 2800c20:	1880141e 	bne	r3,r2,2800c74 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2800c24:	e0bffe17 	ldw	r2,-8(fp)
 2800c28:	1090000c 	andi	r2,r2,16384
 2800c2c:	1004c03a 	cmpne	r2,r2,zero
 2800c30:	1000101e 	bne	r2,zero,2800c74 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2800c34:	e0bffb17 	ldw	r2,-20(fp)
 2800c38:	10c00a17 	ldw	r3,40(r2)
 2800c3c:	e0bff717 	ldw	r2,-36(fp)
 2800c40:	1880051e 	bne	r3,r2,2800c58 <altera_avalon_jtag_uart_read+0x13c>
 2800c44:	e0bffb17 	ldw	r2,-20(fp)
 2800c48:	10c00917 	ldw	r3,36(r2)
 2800c4c:	e0bffb17 	ldw	r2,-20(fp)
 2800c50:	10800117 	ldw	r2,4(r2)
 2800c54:	18bff736 	bltu	r3,r2,2800c34 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2800c58:	e0bffb17 	ldw	r2,-20(fp)
 2800c5c:	10c00a17 	ldw	r3,40(r2)
 2800c60:	e0bff717 	ldw	r2,-36(fp)
 2800c64:	18800326 	beq	r3,r2,2800c74 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2800c68:	e0bffd17 	ldw	r2,-12(fp)
 2800c6c:	10800048 	cmpgei	r2,r2,1
 2800c70:	103fb51e 	bne	r2,zero,2800b48 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 2800c74:	e0fffa17 	ldw	r3,-24(fp)
 2800c78:	e0bffc17 	ldw	r2,-16(fp)
 2800c7c:	18801926 	beq	r3,r2,2800ce4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2800c80:	0005303a 	rdctl	r2,status
 2800c84:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2800c88:	e0fff517 	ldw	r3,-44(fp)
 2800c8c:	00bfff84 	movi	r2,-2
 2800c90:	1884703a 	and	r2,r3,r2
 2800c94:	1001703a 	wrctl	status,r2
  
  return context;
 2800c98:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2800c9c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2800ca0:	e0bffb17 	ldw	r2,-20(fp)
 2800ca4:	10800817 	ldw	r2,32(r2)
 2800ca8:	10c00054 	ori	r3,r2,1
 2800cac:	e0bffb17 	ldw	r2,-20(fp)
 2800cb0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2800cb4:	e0bffb17 	ldw	r2,-20(fp)
 2800cb8:	10800017 	ldw	r2,0(r2)
 2800cbc:	11000104 	addi	r4,r2,4
 2800cc0:	e0bffb17 	ldw	r2,-20(fp)
 2800cc4:	10800817 	ldw	r2,32(r2)
 2800cc8:	1007883a 	mov	r3,r2
 2800ccc:	2005883a 	mov	r2,r4
 2800cd0:	10c00035 	stwio	r3,0(r2)
 2800cd4:	e0bff917 	ldw	r2,-28(fp)
 2800cd8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2800cdc:	e0bff417 	ldw	r2,-48(fp)
 2800ce0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2800ce4:	e0fffa17 	ldw	r3,-24(fp)
 2800ce8:	e0bffc17 	ldw	r2,-16(fp)
 2800cec:	18800526 	beq	r3,r2,2800d04 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 2800cf0:	e0fffa17 	ldw	r3,-24(fp)
 2800cf4:	e0bffc17 	ldw	r2,-16(fp)
 2800cf8:	1887c83a 	sub	r3,r3,r2
 2800cfc:	e0ffff15 	stw	r3,-4(fp)
 2800d00:	00000906 	br	2800d28 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 2800d04:	e0bffe17 	ldw	r2,-8(fp)
 2800d08:	1090000c 	andi	r2,r2,16384
 2800d0c:	1005003a 	cmpeq	r2,r2,zero
 2800d10:	1000031e 	bne	r2,zero,2800d20 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 2800d14:	00bffd44 	movi	r2,-11
 2800d18:	e0bfff15 	stw	r2,-4(fp)
 2800d1c:	00000206 	br	2800d28 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 2800d20:	00bffec4 	movi	r2,-5
 2800d24:	e0bfff15 	stw	r2,-4(fp)
 2800d28:	e0bfff17 	ldw	r2,-4(fp)
}
 2800d2c:	e037883a 	mov	sp,fp
 2800d30:	dfc00117 	ldw	ra,4(sp)
 2800d34:	df000017 	ldw	fp,0(sp)
 2800d38:	dec00204 	addi	sp,sp,8
 2800d3c:	f800283a 	ret

02800d40 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2800d40:	defff204 	addi	sp,sp,-56
 2800d44:	dfc00d15 	stw	ra,52(sp)
 2800d48:	df000c15 	stw	fp,48(sp)
 2800d4c:	df000c04 	addi	fp,sp,48
 2800d50:	e13ffb15 	stw	r4,-20(fp)
 2800d54:	e17ffc15 	stw	r5,-16(fp)
 2800d58:	e1bffd15 	stw	r6,-12(fp)
 2800d5c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2800d60:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2800d64:	e0bffc17 	ldw	r2,-16(fp)
 2800d68:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2800d6c:	00003a06 	br	2800e58 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2800d70:	e0bffb17 	ldw	r2,-20(fp)
 2800d74:	10800c17 	ldw	r2,48(r2)
 2800d78:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 2800d7c:	e0bffb17 	ldw	r2,-20(fp)
 2800d80:	10800d17 	ldw	r2,52(r2)
 2800d84:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 2800d88:	e0fffa17 	ldw	r3,-24(fp)
 2800d8c:	e0bff917 	ldw	r2,-28(fp)
 2800d90:	1880062e 	bgeu	r3,r2,2800dac <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2800d94:	e0fff917 	ldw	r3,-28(fp)
 2800d98:	e0bffa17 	ldw	r2,-24(fp)
 2800d9c:	1885c83a 	sub	r2,r3,r2
 2800da0:	10bfffc4 	addi	r2,r2,-1
 2800da4:	e0bff815 	stw	r2,-32(fp)
 2800da8:	00000c06 	br	2800ddc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 2800dac:	e0bff917 	ldw	r2,-28(fp)
 2800db0:	1005003a 	cmpeq	r2,r2,zero
 2800db4:	1000051e 	bne	r2,zero,2800dcc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2800db8:	00820004 	movi	r2,2048
 2800dbc:	e0fffa17 	ldw	r3,-24(fp)
 2800dc0:	10c5c83a 	sub	r2,r2,r3
 2800dc4:	e0bff815 	stw	r2,-32(fp)
 2800dc8:	00000406 	br	2800ddc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2800dcc:	0081ffc4 	movi	r2,2047
 2800dd0:	e0fffa17 	ldw	r3,-24(fp)
 2800dd4:	10c5c83a 	sub	r2,r2,r3
 2800dd8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 2800ddc:	e0bff817 	ldw	r2,-32(fp)
 2800de0:	1005003a 	cmpeq	r2,r2,zero
 2800de4:	10001f1e 	bne	r2,zero,2800e64 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 2800de8:	e0fffd17 	ldw	r3,-12(fp)
 2800dec:	e0bff817 	ldw	r2,-32(fp)
 2800df0:	1880022e 	bgeu	r3,r2,2800dfc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 2800df4:	e0bffd17 	ldw	r2,-12(fp)
 2800df8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2800dfc:	e0bffb17 	ldw	r2,-20(fp)
 2800e00:	10c20e04 	addi	r3,r2,2104
 2800e04:	e0bffa17 	ldw	r2,-24(fp)
 2800e08:	1885883a 	add	r2,r3,r2
 2800e0c:	e0fffc17 	ldw	r3,-16(fp)
 2800e10:	1009883a 	mov	r4,r2
 2800e14:	180b883a 	mov	r5,r3
 2800e18:	e1bff817 	ldw	r6,-32(fp)
 2800e1c:	28022500 	call	2802250 <memcpy>
      ptr   += n;
 2800e20:	e0fff817 	ldw	r3,-32(fp)
 2800e24:	e0bffc17 	ldw	r2,-16(fp)
 2800e28:	10c5883a 	add	r2,r2,r3
 2800e2c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 2800e30:	e0fffd17 	ldw	r3,-12(fp)
 2800e34:	e0bff817 	ldw	r2,-32(fp)
 2800e38:	1885c83a 	sub	r2,r3,r2
 2800e3c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2800e40:	e0fffa17 	ldw	r3,-24(fp)
 2800e44:	e0bff817 	ldw	r2,-32(fp)
 2800e48:	1885883a 	add	r2,r3,r2
 2800e4c:	10c1ffcc 	andi	r3,r2,2047
 2800e50:	e0bffb17 	ldw	r2,-20(fp)
 2800e54:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2800e58:	e0bffd17 	ldw	r2,-12(fp)
 2800e5c:	10800048 	cmpgei	r2,r2,1
 2800e60:	103fc31e 	bne	r2,zero,2800d70 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2800e64:	0005303a 	rdctl	r2,status
 2800e68:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2800e6c:	e0fff517 	ldw	r3,-44(fp)
 2800e70:	00bfff84 	movi	r2,-2
 2800e74:	1884703a 	and	r2,r3,r2
 2800e78:	1001703a 	wrctl	status,r2
  
  return context;
 2800e7c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2800e80:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2800e84:	e0bffb17 	ldw	r2,-20(fp)
 2800e88:	10800817 	ldw	r2,32(r2)
 2800e8c:	10c00094 	ori	r3,r2,2
 2800e90:	e0bffb17 	ldw	r2,-20(fp)
 2800e94:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2800e98:	e0bffb17 	ldw	r2,-20(fp)
 2800e9c:	10800017 	ldw	r2,0(r2)
 2800ea0:	11000104 	addi	r4,r2,4
 2800ea4:	e0bffb17 	ldw	r2,-20(fp)
 2800ea8:	10800817 	ldw	r2,32(r2)
 2800eac:	1007883a 	mov	r3,r2
 2800eb0:	2005883a 	mov	r2,r4
 2800eb4:	10c00035 	stwio	r3,0(r2)
 2800eb8:	e0bff717 	ldw	r2,-36(fp)
 2800ebc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2800ec0:	e0bff417 	ldw	r2,-48(fp)
 2800ec4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2800ec8:	e0bffd17 	ldw	r2,-12(fp)
 2800ecc:	10800050 	cmplti	r2,r2,1
 2800ed0:	1000111e 	bne	r2,zero,2800f18 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 2800ed4:	e0bffe17 	ldw	r2,-8(fp)
 2800ed8:	1090000c 	andi	r2,r2,16384
 2800edc:	1004c03a 	cmpne	r2,r2,zero
 2800ee0:	1000101e 	bne	r2,zero,2800f24 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2800ee4:	e0bffb17 	ldw	r2,-20(fp)
 2800ee8:	10c00d17 	ldw	r3,52(r2)
 2800eec:	e0bff917 	ldw	r2,-28(fp)
 2800ef0:	1880051e 	bne	r3,r2,2800f08 <altera_avalon_jtag_uart_write+0x1c8>
 2800ef4:	e0bffb17 	ldw	r2,-20(fp)
 2800ef8:	10c00917 	ldw	r3,36(r2)
 2800efc:	e0bffb17 	ldw	r2,-20(fp)
 2800f00:	10800117 	ldw	r2,4(r2)
 2800f04:	18bff736 	bltu	r3,r2,2800ee4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 2800f08:	e0bffb17 	ldw	r2,-20(fp)
 2800f0c:	10c00d17 	ldw	r3,52(r2)
 2800f10:	e0bff917 	ldw	r2,-28(fp)
 2800f14:	18800326 	beq	r3,r2,2800f24 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 2800f18:	e0bffd17 	ldw	r2,-12(fp)
 2800f1c:	10800048 	cmpgei	r2,r2,1
 2800f20:	103fcd1e 	bne	r2,zero,2800e58 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2800f24:	e0fffc17 	ldw	r3,-16(fp)
 2800f28:	e0bff617 	ldw	r2,-40(fp)
 2800f2c:	18800526 	beq	r3,r2,2800f44 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 2800f30:	e0fffc17 	ldw	r3,-16(fp)
 2800f34:	e0bff617 	ldw	r2,-40(fp)
 2800f38:	1887c83a 	sub	r3,r3,r2
 2800f3c:	e0ffff15 	stw	r3,-4(fp)
 2800f40:	00000906 	br	2800f68 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 2800f44:	e0bffe17 	ldw	r2,-8(fp)
 2800f48:	1090000c 	andi	r2,r2,16384
 2800f4c:	1005003a 	cmpeq	r2,r2,zero
 2800f50:	1000031e 	bne	r2,zero,2800f60 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 2800f54:	00bffd44 	movi	r2,-11
 2800f58:	e0bfff15 	stw	r2,-4(fp)
 2800f5c:	00000206 	br	2800f68 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 2800f60:	00bffec4 	movi	r2,-5
 2800f64:	e0bfff15 	stw	r2,-4(fp)
 2800f68:	e0bfff17 	ldw	r2,-4(fp)
}
 2800f6c:	e037883a 	mov	sp,fp
 2800f70:	dfc00117 	ldw	ra,4(sp)
 2800f74:	df000017 	ldw	fp,0(sp)
 2800f78:	dec00204 	addi	sp,sp,8
 2800f7c:	f800283a 	ret

02800f80 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2800f80:	defff404 	addi	sp,sp,-48
 2800f84:	df000b15 	stw	fp,44(sp)
 2800f88:	df000b04 	addi	fp,sp,44
 2800f8c:	e13ffb15 	stw	r4,-20(fp)
 2800f90:	e17ffc15 	stw	r5,-16(fp)
 2800f94:	e1bffd15 	stw	r6,-12(fp)
 2800f98:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 2800f9c:	e03ff915 	stw	zero,-28(fp)
 2800fa0:	0080a034 	movhi	r2,640
 2800fa4:	10953704 	addi	r2,r2,21724
 2800fa8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 2800fac:	1005003a 	cmpeq	r2,r2,zero
 2800fb0:	1000411e 	bne	r2,zero,28010b8 <alt_alarm_start+0x138>
  {
    if (alarm)
 2800fb4:	e0bffb17 	ldw	r2,-20(fp)
 2800fb8:	1005003a 	cmpeq	r2,r2,zero
 2800fbc:	10003b1e 	bne	r2,zero,28010ac <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 2800fc0:	e0fffb17 	ldw	r3,-20(fp)
 2800fc4:	e0bffd17 	ldw	r2,-12(fp)
 2800fc8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 2800fcc:	e0fffb17 	ldw	r3,-20(fp)
 2800fd0:	e0bffe17 	ldw	r2,-8(fp)
 2800fd4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2800fd8:	0005303a 	rdctl	r2,status
 2800fdc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2800fe0:	e0fff817 	ldw	r3,-32(fp)
 2800fe4:	00bfff84 	movi	r2,-2
 2800fe8:	1884703a 	and	r2,r3,r2
 2800fec:	1001703a 	wrctl	status,r2
  
  return context;
 2800ff0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 2800ff4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2800ff8:	0080a034 	movhi	r2,640
 2800ffc:	10953804 	addi	r2,r2,21728
 2801000:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 2801004:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2801008:	e0fffc17 	ldw	r3,-16(fp)
 280100c:	e0bff917 	ldw	r2,-28(fp)
 2801010:	1885883a 	add	r2,r3,r2
 2801014:	10c00044 	addi	r3,r2,1
 2801018:	e0bffb17 	ldw	r2,-20(fp)
 280101c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2801020:	e0bffb17 	ldw	r2,-20(fp)
 2801024:	10c00217 	ldw	r3,8(r2)
 2801028:	e0bff917 	ldw	r2,-28(fp)
 280102c:	1880042e 	bgeu	r3,r2,2801040 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 2801030:	e0fffb17 	ldw	r3,-20(fp)
 2801034:	00800044 	movi	r2,1
 2801038:	18800405 	stb	r2,16(r3)
 280103c:	00000206 	br	2801048 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 2801040:	e0bffb17 	ldw	r2,-20(fp)
 2801044:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2801048:	e0fffb17 	ldw	r3,-20(fp)
 280104c:	0080a034 	movhi	r2,640
 2801050:	108fa204 	addi	r2,r2,16008
 2801054:	e0bff615 	stw	r2,-40(fp)
 2801058:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 280105c:	e0fff717 	ldw	r3,-36(fp)
 2801060:	e0bff617 	ldw	r2,-40(fp)
 2801064:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 2801068:	e0bff617 	ldw	r2,-40(fp)
 280106c:	10c00017 	ldw	r3,0(r2)
 2801070:	e0bff717 	ldw	r2,-36(fp)
 2801074:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2801078:	e0bff617 	ldw	r2,-40(fp)
 280107c:	10c00017 	ldw	r3,0(r2)
 2801080:	e0bff717 	ldw	r2,-36(fp)
 2801084:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 2801088:	e0fff617 	ldw	r3,-40(fp)
 280108c:	e0bff717 	ldw	r2,-36(fp)
 2801090:	18800015 	stw	r2,0(r3)
 2801094:	e0bffa17 	ldw	r2,-24(fp)
 2801098:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 280109c:	e0bff517 	ldw	r2,-44(fp)
 28010a0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 28010a4:	e03fff15 	stw	zero,-4(fp)
 28010a8:	00000506 	br	28010c0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 28010ac:	00bffa84 	movi	r2,-22
 28010b0:	e0bfff15 	stw	r2,-4(fp)
 28010b4:	00000206 	br	28010c0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 28010b8:	00bfde84 	movi	r2,-134
 28010bc:	e0bfff15 	stw	r2,-4(fp)
 28010c0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 28010c4:	e037883a 	mov	sp,fp
 28010c8:	df000017 	ldw	fp,0(sp)
 28010cc:	dec00104 	addi	sp,sp,4
 28010d0:	f800283a 	ret

028010d4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 28010d4:	defffa04 	addi	sp,sp,-24
 28010d8:	dfc00515 	stw	ra,20(sp)
 28010dc:	df000415 	stw	fp,16(sp)
 28010e0:	df000404 	addi	fp,sp,16
 28010e4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 28010e8:	00800244 	movi	r2,9
 28010ec:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 28010f0:	e13ffc17 	ldw	r4,-16(fp)
 28010f4:	014003f4 	movhi	r5,15
 28010f8:	29509004 	addi	r5,r5,16960
 28010fc:	28027980 	call	2802798 <__mulsi3>
 2801100:	100b883a 	mov	r5,r2
 2801104:	0101fcf4 	movhi	r4,2035
 2801108:	21205404 	addi	r4,r4,-32432
 280110c:	28027880 	call	2802788 <__udivsi3>
 2801110:	100b883a 	mov	r5,r2
 2801114:	01200034 	movhi	r4,32768
 2801118:	213fffc4 	addi	r4,r4,-1
 280111c:	28027880 	call	2802788 <__udivsi3>
 2801120:	100b883a 	mov	r5,r2
 2801124:	e13fff17 	ldw	r4,-4(fp)
 2801128:	28027880 	call	2802788 <__udivsi3>
 280112c:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 2801130:	e0bffd17 	ldw	r2,-12(fp)
 2801134:	1005003a 	cmpeq	r2,r2,zero
 2801138:	10002a1e 	bne	r2,zero,28011e4 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
 280113c:	e03ffe15 	stw	zero,-8(fp)
 2801140:	00001706 	br	28011a0 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 2801144:	00a00034 	movhi	r2,32768
 2801148:	10bfffc4 	addi	r2,r2,-1
 280114c:	10bfffc4 	addi	r2,r2,-1
 2801150:	103ffe1e 	bne	r2,zero,280114c <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 2801154:	e13ffc17 	ldw	r4,-16(fp)
 2801158:	014003f4 	movhi	r5,15
 280115c:	29509004 	addi	r5,r5,16960
 2801160:	28027980 	call	2802798 <__mulsi3>
 2801164:	100b883a 	mov	r5,r2
 2801168:	0101fcf4 	movhi	r4,2035
 280116c:	21205404 	addi	r4,r4,-32432
 2801170:	28027880 	call	2802788 <__udivsi3>
 2801174:	100b883a 	mov	r5,r2
 2801178:	01200034 	movhi	r4,32768
 280117c:	213fffc4 	addi	r4,r4,-1
 2801180:	28027880 	call	2802788 <__udivsi3>
 2801184:	1007883a 	mov	r3,r2
 2801188:	e0bfff17 	ldw	r2,-4(fp)
 280118c:	10c5c83a 	sub	r2,r2,r3
 2801190:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 2801194:	e0bffe17 	ldw	r2,-8(fp)
 2801198:	10800044 	addi	r2,r2,1
 280119c:	e0bffe15 	stw	r2,-8(fp)
 28011a0:	e0fffe17 	ldw	r3,-8(fp)
 28011a4:	e0bffd17 	ldw	r2,-12(fp)
 28011a8:	18bfe616 	blt	r3,r2,2801144 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 28011ac:	e13ffc17 	ldw	r4,-16(fp)
 28011b0:	014003f4 	movhi	r5,15
 28011b4:	29509004 	addi	r5,r5,16960
 28011b8:	28027980 	call	2802798 <__mulsi3>
 28011bc:	100b883a 	mov	r5,r2
 28011c0:	0101fcf4 	movhi	r4,2035
 28011c4:	21205404 	addi	r4,r4,-32432
 28011c8:	28027880 	call	2802788 <__udivsi3>
 28011cc:	1009883a 	mov	r4,r2
 28011d0:	e17fff17 	ldw	r5,-4(fp)
 28011d4:	28027980 	call	2802798 <__mulsi3>
 28011d8:	10bfffc4 	addi	r2,r2,-1
 28011dc:	103ffe1e 	bne	r2,zero,28011d8 <alt_busy_sleep+0x104>
 28011e0:	00000d06 	br	2801218 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 28011e4:	e13ffc17 	ldw	r4,-16(fp)
 28011e8:	014003f4 	movhi	r5,15
 28011ec:	29509004 	addi	r5,r5,16960
 28011f0:	28027980 	call	2802798 <__mulsi3>
 28011f4:	100b883a 	mov	r5,r2
 28011f8:	0101fcf4 	movhi	r4,2035
 28011fc:	21205404 	addi	r4,r4,-32432
 2801200:	28027880 	call	2802788 <__udivsi3>
 2801204:	1009883a 	mov	r4,r2
 2801208:	e17fff17 	ldw	r5,-4(fp)
 280120c:	28027980 	call	2802798 <__mulsi3>
 2801210:	10bfffc4 	addi	r2,r2,-1
 2801214:	00bffe16 	blt	zero,r2,2801210 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 2801218:	0005883a 	mov	r2,zero
}
 280121c:	e037883a 	mov	sp,fp
 2801220:	dfc00117 	ldw	ra,4(sp)
 2801224:	df000017 	ldw	fp,0(sp)
 2801228:	dec00204 	addi	sp,sp,8
 280122c:	f800283a 	ret

02801230 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2801230:	defff804 	addi	sp,sp,-32
 2801234:	dfc00715 	stw	ra,28(sp)
 2801238:	df000615 	stw	fp,24(sp)
 280123c:	df000604 	addi	fp,sp,24
 2801240:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2801244:	e0bffc17 	ldw	r2,-16(fp)
 2801248:	1004803a 	cmplt	r2,r2,zero
 280124c:	1000091e 	bne	r2,zero,2801274 <close+0x44>
 2801250:	e13ffc17 	ldw	r4,-16(fp)
 2801254:	01400304 	movi	r5,12
 2801258:	28027980 	call	2802798 <__mulsi3>
 280125c:	1007883a 	mov	r3,r2
 2801260:	0080a034 	movhi	r2,640
 2801264:	108e3b04 	addi	r2,r2,14572
 2801268:	1887883a 	add	r3,r3,r2
 280126c:	e0ffff15 	stw	r3,-4(fp)
 2801270:	00000106 	br	2801278 <close+0x48>
 2801274:	e03fff15 	stw	zero,-4(fp)
 2801278:	e0bfff17 	ldw	r2,-4(fp)
 280127c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 2801280:	e0bffb17 	ldw	r2,-20(fp)
 2801284:	1005003a 	cmpeq	r2,r2,zero
 2801288:	10001d1e 	bne	r2,zero,2801300 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 280128c:	e0bffb17 	ldw	r2,-20(fp)
 2801290:	10800017 	ldw	r2,0(r2)
 2801294:	10800417 	ldw	r2,16(r2)
 2801298:	1005003a 	cmpeq	r2,r2,zero
 280129c:	1000071e 	bne	r2,zero,28012bc <close+0x8c>
 28012a0:	e0bffb17 	ldw	r2,-20(fp)
 28012a4:	10800017 	ldw	r2,0(r2)
 28012a8:	10800417 	ldw	r2,16(r2)
 28012ac:	e13ffb17 	ldw	r4,-20(fp)
 28012b0:	103ee83a 	callr	r2
 28012b4:	e0bffe15 	stw	r2,-8(fp)
 28012b8:	00000106 	br	28012c0 <close+0x90>
 28012bc:	e03ffe15 	stw	zero,-8(fp)
 28012c0:	e0bffe17 	ldw	r2,-8(fp)
 28012c4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 28012c8:	e13ffc17 	ldw	r4,-16(fp)
 28012cc:	2801cd00 	call	2801cd0 <alt_release_fd>
    if (rval < 0)
 28012d0:	e0bffa17 	ldw	r2,-24(fp)
 28012d4:	1004403a 	cmpge	r2,r2,zero
 28012d8:	1000071e 	bne	r2,zero,28012f8 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 28012dc:	28013300 	call	2801330 <alt_get_errno>
 28012e0:	e0fffa17 	ldw	r3,-24(fp)
 28012e4:	00c7c83a 	sub	r3,zero,r3
 28012e8:	10c00015 	stw	r3,0(r2)
      return -1;
 28012ec:	00bfffc4 	movi	r2,-1
 28012f0:	e0bffd15 	stw	r2,-12(fp)
 28012f4:	00000806 	br	2801318 <close+0xe8>
    }
    return 0;
 28012f8:	e03ffd15 	stw	zero,-12(fp)
 28012fc:	00000606 	br	2801318 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2801300:	28013300 	call	2801330 <alt_get_errno>
 2801304:	1007883a 	mov	r3,r2
 2801308:	00801444 	movi	r2,81
 280130c:	18800015 	stw	r2,0(r3)
    return -1;
 2801310:	00bfffc4 	movi	r2,-1
 2801314:	e0bffd15 	stw	r2,-12(fp)
 2801318:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 280131c:	e037883a 	mov	sp,fp
 2801320:	dfc00117 	ldw	ra,4(sp)
 2801324:	df000017 	ldw	fp,0(sp)
 2801328:	dec00204 	addi	sp,sp,8
 280132c:	f800283a 	ret

02801330 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2801330:	defffd04 	addi	sp,sp,-12
 2801334:	dfc00215 	stw	ra,8(sp)
 2801338:	df000115 	stw	fp,4(sp)
 280133c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2801340:	0080a034 	movhi	r2,640
 2801344:	108fa004 	addi	r2,r2,16000
 2801348:	10800017 	ldw	r2,0(r2)
 280134c:	1005003a 	cmpeq	r2,r2,zero
 2801350:	1000061e 	bne	r2,zero,280136c <alt_get_errno+0x3c>
 2801354:	0080a034 	movhi	r2,640
 2801358:	108fa004 	addi	r2,r2,16000
 280135c:	10800017 	ldw	r2,0(r2)
 2801360:	103ee83a 	callr	r2
 2801364:	e0bfff15 	stw	r2,-4(fp)
 2801368:	00000306 	br	2801378 <alt_get_errno+0x48>
 280136c:	0080a034 	movhi	r2,640
 2801370:	10953904 	addi	r2,r2,21732
 2801374:	e0bfff15 	stw	r2,-4(fp)
 2801378:	e0bfff17 	ldw	r2,-4(fp)
}
 280137c:	e037883a 	mov	sp,fp
 2801380:	dfc00117 	ldw	ra,4(sp)
 2801384:	df000017 	ldw	fp,0(sp)
 2801388:	dec00204 	addi	sp,sp,8
 280138c:	f800283a 	ret

02801390 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2801390:	deffff04 	addi	sp,sp,-4
 2801394:	df000015 	stw	fp,0(sp)
 2801398:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 280139c:	e037883a 	mov	sp,fp
 28013a0:	df000017 	ldw	fp,0(sp)
 28013a4:	dec00104 	addi	sp,sp,4
 28013a8:	f800283a 	ret

028013ac <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 28013ac:	defffc04 	addi	sp,sp,-16
 28013b0:	df000315 	stw	fp,12(sp)
 28013b4:	df000304 	addi	fp,sp,12
 28013b8:	e13ffd15 	stw	r4,-12(fp)
 28013bc:	e17ffe15 	stw	r5,-8(fp)
 28013c0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 28013c4:	e0bfff17 	ldw	r2,-4(fp)
}
 28013c8:	e037883a 	mov	sp,fp
 28013cc:	df000017 	ldw	fp,0(sp)
 28013d0:	dec00104 	addi	sp,sp,4
 28013d4:	f800283a 	ret

028013d8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 28013d8:	defff904 	addi	sp,sp,-28
 28013dc:	dfc00615 	stw	ra,24(sp)
 28013e0:	df000515 	stw	fp,20(sp)
 28013e4:	df000504 	addi	fp,sp,20
 28013e8:	e13ffd15 	stw	r4,-12(fp)
 28013ec:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 28013f0:	e0bffd17 	ldw	r2,-12(fp)
 28013f4:	1005003a 	cmpeq	r2,r2,zero
 28013f8:	1000041e 	bne	r2,zero,280140c <alt_dev_llist_insert+0x34>
 28013fc:	e0bffd17 	ldw	r2,-12(fp)
 2801400:	10800217 	ldw	r2,8(r2)
 2801404:	1004c03a 	cmpne	r2,r2,zero
 2801408:	1000071e 	bne	r2,zero,2801428 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 280140c:	280148c0 	call	280148c <alt_get_errno>
 2801410:	1007883a 	mov	r3,r2
 2801414:	00800584 	movi	r2,22
 2801418:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 280141c:	00bffa84 	movi	r2,-22
 2801420:	e0bfff15 	stw	r2,-4(fp)
 2801424:	00001306 	br	2801474 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2801428:	e0fffd17 	ldw	r3,-12(fp)
 280142c:	e0bffe17 	ldw	r2,-8(fp)
 2801430:	e0bffb15 	stw	r2,-20(fp)
 2801434:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2801438:	e0fffc17 	ldw	r3,-16(fp)
 280143c:	e0bffb17 	ldw	r2,-20(fp)
 2801440:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 2801444:	e0bffb17 	ldw	r2,-20(fp)
 2801448:	10c00017 	ldw	r3,0(r2)
 280144c:	e0bffc17 	ldw	r2,-16(fp)
 2801450:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2801454:	e0bffb17 	ldw	r2,-20(fp)
 2801458:	10c00017 	ldw	r3,0(r2)
 280145c:	e0bffc17 	ldw	r2,-16(fp)
 2801460:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 2801464:	e0fffb17 	ldw	r3,-20(fp)
 2801468:	e0bffc17 	ldw	r2,-16(fp)
 280146c:	18800015 	stw	r2,0(r3)

  return 0;  
 2801470:	e03fff15 	stw	zero,-4(fp)
 2801474:	e0bfff17 	ldw	r2,-4(fp)
}
 2801478:	e037883a 	mov	sp,fp
 280147c:	dfc00117 	ldw	ra,4(sp)
 2801480:	df000017 	ldw	fp,0(sp)
 2801484:	dec00204 	addi	sp,sp,8
 2801488:	f800283a 	ret

0280148c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 280148c:	defffd04 	addi	sp,sp,-12
 2801490:	dfc00215 	stw	ra,8(sp)
 2801494:	df000115 	stw	fp,4(sp)
 2801498:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 280149c:	0080a034 	movhi	r2,640
 28014a0:	108fa004 	addi	r2,r2,16000
 28014a4:	10800017 	ldw	r2,0(r2)
 28014a8:	1005003a 	cmpeq	r2,r2,zero
 28014ac:	1000061e 	bne	r2,zero,28014c8 <alt_get_errno+0x3c>
 28014b0:	0080a034 	movhi	r2,640
 28014b4:	108fa004 	addi	r2,r2,16000
 28014b8:	10800017 	ldw	r2,0(r2)
 28014bc:	103ee83a 	callr	r2
 28014c0:	e0bfff15 	stw	r2,-4(fp)
 28014c4:	00000306 	br	28014d4 <alt_get_errno+0x48>
 28014c8:	0080a034 	movhi	r2,640
 28014cc:	10953904 	addi	r2,r2,21732
 28014d0:	e0bfff15 	stw	r2,-4(fp)
 28014d4:	e0bfff17 	ldw	r2,-4(fp)
}
 28014d8:	e037883a 	mov	sp,fp
 28014dc:	dfc00117 	ldw	ra,4(sp)
 28014e0:	df000017 	ldw	fp,0(sp)
 28014e4:	dec00204 	addi	sp,sp,8
 28014e8:	f800283a 	ret

028014ec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 28014ec:	defffd04 	addi	sp,sp,-12
 28014f0:	dfc00215 	stw	ra,8(sp)
 28014f4:	df000115 	stw	fp,4(sp)
 28014f8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 28014fc:	00bfff04 	movi	r2,-4
 2801500:	00c0a034 	movhi	r3,640
 2801504:	18ca0d04 	addi	r3,r3,10292
 2801508:	1885883a 	add	r2,r3,r2
 280150c:	e0bfff15 	stw	r2,-4(fp)
 2801510:	00000606 	br	280152c <_do_ctors+0x40>
        (*ctor) (); 
 2801514:	e0bfff17 	ldw	r2,-4(fp)
 2801518:	10800017 	ldw	r2,0(r2)
 280151c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2801520:	e0bfff17 	ldw	r2,-4(fp)
 2801524:	10bfff04 	addi	r2,r2,-4
 2801528:	e0bfff15 	stw	r2,-4(fp)
 280152c:	e0ffff17 	ldw	r3,-4(fp)
 2801530:	0080a034 	movhi	r2,640
 2801534:	108a0c04 	addi	r2,r2,10288
 2801538:	18bff62e 	bgeu	r3,r2,2801514 <_do_ctors+0x28>
        (*ctor) (); 
}
 280153c:	e037883a 	mov	sp,fp
 2801540:	dfc00117 	ldw	ra,4(sp)
 2801544:	df000017 	ldw	fp,0(sp)
 2801548:	dec00204 	addi	sp,sp,8
 280154c:	f800283a 	ret

02801550 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2801550:	defffd04 	addi	sp,sp,-12
 2801554:	dfc00215 	stw	ra,8(sp)
 2801558:	df000115 	stw	fp,4(sp)
 280155c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2801560:	00bfff04 	movi	r2,-4
 2801564:	00c0a034 	movhi	r3,640
 2801568:	18ca0d04 	addi	r3,r3,10292
 280156c:	1885883a 	add	r2,r3,r2
 2801570:	e0bfff15 	stw	r2,-4(fp)
 2801574:	00000606 	br	2801590 <_do_dtors+0x40>
        (*dtor) (); 
 2801578:	e0bfff17 	ldw	r2,-4(fp)
 280157c:	10800017 	ldw	r2,0(r2)
 2801580:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2801584:	e0bfff17 	ldw	r2,-4(fp)
 2801588:	10bfff04 	addi	r2,r2,-4
 280158c:	e0bfff15 	stw	r2,-4(fp)
 2801590:	e0ffff17 	ldw	r3,-4(fp)
 2801594:	0080a034 	movhi	r2,640
 2801598:	108a0d04 	addi	r2,r2,10292
 280159c:	18bff62e 	bgeu	r3,r2,2801578 <_do_dtors+0x28>
        (*dtor) (); 
}
 28015a0:	e037883a 	mov	sp,fp
 28015a4:	dfc00117 	ldw	ra,4(sp)
 28015a8:	df000017 	ldw	fp,0(sp)
 28015ac:	dec00204 	addi	sp,sp,8
 28015b0:	f800283a 	ret

028015b4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 28015b4:	deffff04 	addi	sp,sp,-4
 28015b8:	df000015 	stw	fp,0(sp)
 28015bc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 28015c0:	e037883a 	mov	sp,fp
 28015c4:	df000017 	ldw	fp,0(sp)
 28015c8:	dec00104 	addi	sp,sp,4
 28015cc:	f800283a 	ret

028015d0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 28015d0:	defff904 	addi	sp,sp,-28
 28015d4:	dfc00615 	stw	ra,24(sp)
 28015d8:	df000515 	stw	fp,20(sp)
 28015dc:	df000504 	addi	fp,sp,20
 28015e0:	e13ffc15 	stw	r4,-16(fp)
 28015e4:	e17ffd15 	stw	r5,-12(fp)
 28015e8:	e1bffe15 	stw	r6,-8(fp)
 28015ec:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 28015f0:	e0800217 	ldw	r2,8(fp)
 28015f4:	d8800015 	stw	r2,0(sp)
 28015f8:	e13ffc17 	ldw	r4,-16(fp)
 28015fc:	e17ffd17 	ldw	r5,-12(fp)
 2801600:	e1bffe17 	ldw	r6,-8(fp)
 2801604:	e1ffff17 	ldw	r7,-4(fp)
 2801608:	28017a40 	call	28017a4 <alt_iic_isr_register>
}  
 280160c:	e037883a 	mov	sp,fp
 2801610:	dfc00117 	ldw	ra,4(sp)
 2801614:	df000017 	ldw	fp,0(sp)
 2801618:	dec00204 	addi	sp,sp,8
 280161c:	f800283a 	ret

02801620 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2801620:	defff904 	addi	sp,sp,-28
 2801624:	df000615 	stw	fp,24(sp)
 2801628:	df000604 	addi	fp,sp,24
 280162c:	e13ffe15 	stw	r4,-8(fp)
 2801630:	e17fff15 	stw	r5,-4(fp)
 2801634:	e0bfff17 	ldw	r2,-4(fp)
 2801638:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 280163c:	0005303a 	rdctl	r2,status
 2801640:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2801644:	e0fffb17 	ldw	r3,-20(fp)
 2801648:	00bfff84 	movi	r2,-2
 280164c:	1884703a 	and	r2,r3,r2
 2801650:	1001703a 	wrctl	status,r2
  
  return context;
 2801654:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2801658:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 280165c:	e0fffc17 	ldw	r3,-16(fp)
 2801660:	00800044 	movi	r2,1
 2801664:	10c4983a 	sll	r2,r2,r3
 2801668:	1007883a 	mov	r3,r2
 280166c:	0080a034 	movhi	r2,640
 2801670:	10953604 	addi	r2,r2,21720
 2801674:	10800017 	ldw	r2,0(r2)
 2801678:	1886b03a 	or	r3,r3,r2
 280167c:	0080a034 	movhi	r2,640
 2801680:	10953604 	addi	r2,r2,21720
 2801684:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2801688:	0080a034 	movhi	r2,640
 280168c:	10953604 	addi	r2,r2,21720
 2801690:	10800017 	ldw	r2,0(r2)
 2801694:	100170fa 	wrctl	ienable,r2
 2801698:	e0bffd17 	ldw	r2,-12(fp)
 280169c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 28016a0:	e0bffa17 	ldw	r2,-24(fp)
 28016a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 28016a8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 28016ac:	e037883a 	mov	sp,fp
 28016b0:	df000017 	ldw	fp,0(sp)
 28016b4:	dec00104 	addi	sp,sp,4
 28016b8:	f800283a 	ret

028016bc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 28016bc:	defff904 	addi	sp,sp,-28
 28016c0:	df000615 	stw	fp,24(sp)
 28016c4:	df000604 	addi	fp,sp,24
 28016c8:	e13ffe15 	stw	r4,-8(fp)
 28016cc:	e17fff15 	stw	r5,-4(fp)
 28016d0:	e0bfff17 	ldw	r2,-4(fp)
 28016d4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 28016d8:	0005303a 	rdctl	r2,status
 28016dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 28016e0:	e0fffb17 	ldw	r3,-20(fp)
 28016e4:	00bfff84 	movi	r2,-2
 28016e8:	1884703a 	and	r2,r3,r2
 28016ec:	1001703a 	wrctl	status,r2
  
  return context;
 28016f0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 28016f4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 28016f8:	e0fffc17 	ldw	r3,-16(fp)
 28016fc:	00800044 	movi	r2,1
 2801700:	10c4983a 	sll	r2,r2,r3
 2801704:	0084303a 	nor	r2,zero,r2
 2801708:	1007883a 	mov	r3,r2
 280170c:	0080a034 	movhi	r2,640
 2801710:	10953604 	addi	r2,r2,21720
 2801714:	10800017 	ldw	r2,0(r2)
 2801718:	1886703a 	and	r3,r3,r2
 280171c:	0080a034 	movhi	r2,640
 2801720:	10953604 	addi	r2,r2,21720
 2801724:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2801728:	0080a034 	movhi	r2,640
 280172c:	10953604 	addi	r2,r2,21720
 2801730:	10800017 	ldw	r2,0(r2)
 2801734:	100170fa 	wrctl	ienable,r2
 2801738:	e0bffd17 	ldw	r2,-12(fp)
 280173c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2801740:	e0bffa17 	ldw	r2,-24(fp)
 2801744:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2801748:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 280174c:	e037883a 	mov	sp,fp
 2801750:	df000017 	ldw	fp,0(sp)
 2801754:	dec00104 	addi	sp,sp,4
 2801758:	f800283a 	ret

0280175c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 280175c:	defffc04 	addi	sp,sp,-16
 2801760:	df000315 	stw	fp,12(sp)
 2801764:	df000304 	addi	fp,sp,12
 2801768:	e13ffe15 	stw	r4,-8(fp)
 280176c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2801770:	000530fa 	rdctl	r2,ienable
 2801774:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 2801778:	e0ffff17 	ldw	r3,-4(fp)
 280177c:	00800044 	movi	r2,1
 2801780:	10c4983a 	sll	r2,r2,r3
 2801784:	1007883a 	mov	r3,r2
 2801788:	e0bffd17 	ldw	r2,-12(fp)
 280178c:	1884703a 	and	r2,r3,r2
 2801790:	1004c03a 	cmpne	r2,r2,zero
}
 2801794:	e037883a 	mov	sp,fp
 2801798:	df000017 	ldw	fp,0(sp)
 280179c:	dec00104 	addi	sp,sp,4
 28017a0:	f800283a 	ret

028017a4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 28017a4:	defff404 	addi	sp,sp,-48
 28017a8:	dfc00b15 	stw	ra,44(sp)
 28017ac:	df000a15 	stw	fp,40(sp)
 28017b0:	df000a04 	addi	fp,sp,40
 28017b4:	e13ffb15 	stw	r4,-20(fp)
 28017b8:	e17ffc15 	stw	r5,-16(fp)
 28017bc:	e1bffd15 	stw	r6,-12(fp)
 28017c0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 28017c4:	00bffa84 	movi	r2,-22
 28017c8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 28017cc:	e0bffc17 	ldw	r2,-16(fp)
 28017d0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 28017d4:	e0bff917 	ldw	r2,-28(fp)
 28017d8:	10800808 	cmpgei	r2,r2,32
 28017dc:	1000291e 	bne	r2,zero,2801884 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 28017e0:	0005303a 	rdctl	r2,status
 28017e4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 28017e8:	e0fff717 	ldw	r3,-36(fp)
 28017ec:	00bfff84 	movi	r2,-2
 28017f0:	1884703a 	and	r2,r3,r2
 28017f4:	1001703a 	wrctl	status,r2
  
  return context;
 28017f8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 28017fc:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 2801800:	e0bff917 	ldw	r2,-28(fp)
 2801804:	00c0a034 	movhi	r3,640
 2801808:	18d53a04 	addi	r3,r3,21736
 280180c:	100490fa 	slli	r2,r2,3
 2801810:	10c7883a 	add	r3,r2,r3
 2801814:	e0bffd17 	ldw	r2,-12(fp)
 2801818:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 280181c:	e0bff917 	ldw	r2,-28(fp)
 2801820:	00c0a034 	movhi	r3,640
 2801824:	18d53a04 	addi	r3,r3,21736
 2801828:	100490fa 	slli	r2,r2,3
 280182c:	10c5883a 	add	r2,r2,r3
 2801830:	10c00104 	addi	r3,r2,4
 2801834:	e0bffe17 	ldw	r2,-8(fp)
 2801838:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 280183c:	e0bffd17 	ldw	r2,-12(fp)
 2801840:	1005003a 	cmpeq	r2,r2,zero
 2801844:	1000051e 	bne	r2,zero,280185c <alt_iic_isr_register+0xb8>
 2801848:	e17ff917 	ldw	r5,-28(fp)
 280184c:	e13ffb17 	ldw	r4,-20(fp)
 2801850:	28016200 	call	2801620 <alt_ic_irq_enable>
 2801854:	e0bfff15 	stw	r2,-4(fp)
 2801858:	00000406 	br	280186c <alt_iic_isr_register+0xc8>
 280185c:	e17ff917 	ldw	r5,-28(fp)
 2801860:	e13ffb17 	ldw	r4,-20(fp)
 2801864:	28016bc0 	call	28016bc <alt_ic_irq_disable>
 2801868:	e0bfff15 	stw	r2,-4(fp)
 280186c:	e0bfff17 	ldw	r2,-4(fp)
 2801870:	e0bffa15 	stw	r2,-24(fp)
 2801874:	e0bff817 	ldw	r2,-32(fp)
 2801878:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 280187c:	e0bff617 	ldw	r2,-40(fp)
 2801880:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2801884:	e0bffa17 	ldw	r2,-24(fp)
}
 2801888:	e037883a 	mov	sp,fp
 280188c:	dfc00117 	ldw	ra,4(sp)
 2801890:	df000017 	ldw	fp,0(sp)
 2801894:	dec00204 	addi	sp,sp,8
 2801898:	f800283a 	ret

0280189c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 280189c:	defff804 	addi	sp,sp,-32
 28018a0:	dfc00715 	stw	ra,28(sp)
 28018a4:	df000615 	stw	fp,24(sp)
 28018a8:	dc000515 	stw	r16,20(sp)
 28018ac:	df000504 	addi	fp,sp,20
 28018b0:	e13ffc15 	stw	r4,-16(fp)
 28018b4:	e17ffd15 	stw	r5,-12(fp)
 28018b8:	e1bffe15 	stw	r6,-8(fp)
 28018bc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 28018c0:	e13ffd17 	ldw	r4,-12(fp)
 28018c4:	e17ffe17 	ldw	r5,-8(fp)
 28018c8:	e1bfff17 	ldw	r6,-4(fp)
 28018cc:	2801ae40 	call	2801ae4 <open>
 28018d0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 28018d4:	e0bffb17 	ldw	r2,-20(fp)
 28018d8:	1004803a 	cmplt	r2,r2,zero
 28018dc:	10001f1e 	bne	r2,zero,280195c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 28018e0:	e13ffb17 	ldw	r4,-20(fp)
 28018e4:	0400a034 	movhi	r16,640
 28018e8:	840e3b04 	addi	r16,r16,14572
 28018ec:	01400304 	movi	r5,12
 28018f0:	28027980 	call	2802798 <__mulsi3>
 28018f4:	1405883a 	add	r2,r2,r16
 28018f8:	10c00017 	ldw	r3,0(r2)
 28018fc:	e0bffc17 	ldw	r2,-16(fp)
 2801900:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2801904:	e13ffb17 	ldw	r4,-20(fp)
 2801908:	0400a034 	movhi	r16,640
 280190c:	840e3b04 	addi	r16,r16,14572
 2801910:	01400304 	movi	r5,12
 2801914:	28027980 	call	2802798 <__mulsi3>
 2801918:	1405883a 	add	r2,r2,r16
 280191c:	10800104 	addi	r2,r2,4
 2801920:	10c00017 	ldw	r3,0(r2)
 2801924:	e0bffc17 	ldw	r2,-16(fp)
 2801928:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 280192c:	e13ffb17 	ldw	r4,-20(fp)
 2801930:	0400a034 	movhi	r16,640
 2801934:	840e3b04 	addi	r16,r16,14572
 2801938:	01400304 	movi	r5,12
 280193c:	28027980 	call	2802798 <__mulsi3>
 2801940:	1405883a 	add	r2,r2,r16
 2801944:	10800204 	addi	r2,r2,8
 2801948:	10c00017 	ldw	r3,0(r2)
 280194c:	e0bffc17 	ldw	r2,-16(fp)
 2801950:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2801954:	e13ffb17 	ldw	r4,-20(fp)
 2801958:	2801cd00 	call	2801cd0 <alt_release_fd>
  }
} 
 280195c:	e037883a 	mov	sp,fp
 2801960:	dfc00217 	ldw	ra,8(sp)
 2801964:	df000117 	ldw	fp,4(sp)
 2801968:	dc000017 	ldw	r16,0(sp)
 280196c:	dec00304 	addi	sp,sp,12
 2801970:	f800283a 	ret

02801974 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2801974:	defffb04 	addi	sp,sp,-20
 2801978:	dfc00415 	stw	ra,16(sp)
 280197c:	df000315 	stw	fp,12(sp)
 2801980:	df000304 	addi	fp,sp,12
 2801984:	e13ffd15 	stw	r4,-12(fp)
 2801988:	e17ffe15 	stw	r5,-8(fp)
 280198c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2801990:	0100a034 	movhi	r4,640
 2801994:	210e3e04 	addi	r4,r4,14584
 2801998:	e17ffd17 	ldw	r5,-12(fp)
 280199c:	01800044 	movi	r6,1
 28019a0:	01c07fc4 	movi	r7,511
 28019a4:	280189c0 	call	280189c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 28019a8:	0100a034 	movhi	r4,640
 28019ac:	210e3b04 	addi	r4,r4,14572
 28019b0:	e17ffe17 	ldw	r5,-8(fp)
 28019b4:	000d883a 	mov	r6,zero
 28019b8:	01c07fc4 	movi	r7,511
 28019bc:	280189c0 	call	280189c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 28019c0:	0100a034 	movhi	r4,640
 28019c4:	210e4104 	addi	r4,r4,14596
 28019c8:	e17fff17 	ldw	r5,-4(fp)
 28019cc:	01800044 	movi	r6,1
 28019d0:	01c07fc4 	movi	r7,511
 28019d4:	280189c0 	call	280189c <alt_open_fd>
}  
 28019d8:	e037883a 	mov	sp,fp
 28019dc:	dfc00117 	ldw	ra,4(sp)
 28019e0:	df000017 	ldw	fp,0(sp)
 28019e4:	dec00204 	addi	sp,sp,8
 28019e8:	f800283a 	ret

028019ec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 28019ec:	defffa04 	addi	sp,sp,-24
 28019f0:	dfc00515 	stw	ra,20(sp)
 28019f4:	df000415 	stw	fp,16(sp)
 28019f8:	dc000315 	stw	r16,12(sp)
 28019fc:	df000304 	addi	fp,sp,12
 2801a00:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2801a04:	e0bffe17 	ldw	r2,-8(fp)
 2801a08:	10800217 	ldw	r2,8(r2)
 2801a0c:	10d00034 	orhi	r3,r2,16384
 2801a10:	e0bffe17 	ldw	r2,-8(fp)
 2801a14:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2801a18:	e03ffd15 	stw	zero,-12(fp)
 2801a1c:	00002306 	br	2801aac <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2801a20:	e13ffd17 	ldw	r4,-12(fp)
 2801a24:	0400a034 	movhi	r16,640
 2801a28:	840e3b04 	addi	r16,r16,14572
 2801a2c:	01400304 	movi	r5,12
 2801a30:	28027980 	call	2802798 <__mulsi3>
 2801a34:	1405883a 	add	r2,r2,r16
 2801a38:	10c00017 	ldw	r3,0(r2)
 2801a3c:	e0bffe17 	ldw	r2,-8(fp)
 2801a40:	10800017 	ldw	r2,0(r2)
 2801a44:	1880161e 	bne	r3,r2,2801aa0 <alt_file_locked+0xb4>
 2801a48:	e13ffd17 	ldw	r4,-12(fp)
 2801a4c:	0400a034 	movhi	r16,640
 2801a50:	840e3b04 	addi	r16,r16,14572
 2801a54:	01400304 	movi	r5,12
 2801a58:	28027980 	call	2802798 <__mulsi3>
 2801a5c:	1405883a 	add	r2,r2,r16
 2801a60:	10800204 	addi	r2,r2,8
 2801a64:	10800017 	ldw	r2,0(r2)
 2801a68:	1004403a 	cmpge	r2,r2,zero
 2801a6c:	10000c1e 	bne	r2,zero,2801aa0 <alt_file_locked+0xb4>
 2801a70:	e13ffd17 	ldw	r4,-12(fp)
 2801a74:	01400304 	movi	r5,12
 2801a78:	28027980 	call	2802798 <__mulsi3>
 2801a7c:	1007883a 	mov	r3,r2
 2801a80:	0080a034 	movhi	r2,640
 2801a84:	108e3b04 	addi	r2,r2,14572
 2801a88:	1887883a 	add	r3,r3,r2
 2801a8c:	e0bffe17 	ldw	r2,-8(fp)
 2801a90:	18800326 	beq	r3,r2,2801aa0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2801a94:	00bffcc4 	movi	r2,-13
 2801a98:	e0bfff15 	stw	r2,-4(fp)
 2801a9c:	00000a06 	br	2801ac8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2801aa0:	e0bffd17 	ldw	r2,-12(fp)
 2801aa4:	10800044 	addi	r2,r2,1
 2801aa8:	e0bffd15 	stw	r2,-12(fp)
 2801aac:	0080a034 	movhi	r2,640
 2801ab0:	108f9f04 	addi	r2,r2,15996
 2801ab4:	10800017 	ldw	r2,0(r2)
 2801ab8:	1007883a 	mov	r3,r2
 2801abc:	e0bffd17 	ldw	r2,-12(fp)
 2801ac0:	18bfd72e 	bgeu	r3,r2,2801a20 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2801ac4:	e03fff15 	stw	zero,-4(fp)
 2801ac8:	e0bfff17 	ldw	r2,-4(fp)
}
 2801acc:	e037883a 	mov	sp,fp
 2801ad0:	dfc00217 	ldw	ra,8(sp)
 2801ad4:	df000117 	ldw	fp,4(sp)
 2801ad8:	dc000017 	ldw	r16,0(sp)
 2801adc:	dec00304 	addi	sp,sp,12
 2801ae0:	f800283a 	ret

02801ae4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2801ae4:	defff404 	addi	sp,sp,-48
 2801ae8:	dfc00b15 	stw	ra,44(sp)
 2801aec:	df000a15 	stw	fp,40(sp)
 2801af0:	df000a04 	addi	fp,sp,40
 2801af4:	e13ffb15 	stw	r4,-20(fp)
 2801af8:	e17ffc15 	stw	r5,-16(fp)
 2801afc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2801b00:	00bfffc4 	movi	r2,-1
 2801b04:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 2801b08:	00bffb44 	movi	r2,-19
 2801b0c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 2801b10:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2801b14:	e13ffb17 	ldw	r4,-20(fp)
 2801b18:	0140a034 	movhi	r5,640
 2801b1c:	294f9d04 	addi	r5,r5,15988
 2801b20:	2801f0c0 	call	2801f0c <alt_find_dev>
 2801b24:	e0bffa15 	stw	r2,-24(fp)
 2801b28:	e0bffa17 	ldw	r2,-24(fp)
 2801b2c:	1004c03a 	cmpne	r2,r2,zero
 2801b30:	1000051e 	bne	r2,zero,2801b48 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2801b34:	e13ffb17 	ldw	r4,-20(fp)
 2801b38:	2801fa00 	call	2801fa0 <alt_find_file>
 2801b3c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 2801b40:	00800044 	movi	r2,1
 2801b44:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2801b48:	e0bffa17 	ldw	r2,-24(fp)
 2801b4c:	1005003a 	cmpeq	r2,r2,zero
 2801b50:	1000311e 	bne	r2,zero,2801c18 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2801b54:	e13ffa17 	ldw	r4,-24(fp)
 2801b58:	28020c00 	call	28020c0 <alt_get_fd>
 2801b5c:	e0bff815 	stw	r2,-32(fp)
 2801b60:	e0bff817 	ldw	r2,-32(fp)
 2801b64:	1004403a 	cmpge	r2,r2,zero
 2801b68:	1000031e 	bne	r2,zero,2801b78 <open+0x94>
    {
      status = index;
 2801b6c:	e0bff817 	ldw	r2,-32(fp)
 2801b70:	e0bff715 	stw	r2,-36(fp)
 2801b74:	00002a06 	br	2801c20 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 2801b78:	e13ff817 	ldw	r4,-32(fp)
 2801b7c:	01400304 	movi	r5,12
 2801b80:	28027980 	call	2802798 <__mulsi3>
 2801b84:	1007883a 	mov	r3,r2
 2801b88:	0080a034 	movhi	r2,640
 2801b8c:	108e3b04 	addi	r2,r2,14572
 2801b90:	1885883a 	add	r2,r3,r2
 2801b94:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2801b98:	e0fffc17 	ldw	r3,-16(fp)
 2801b9c:	00900034 	movhi	r2,16384
 2801ba0:	10bfffc4 	addi	r2,r2,-1
 2801ba4:	1886703a 	and	r3,r3,r2
 2801ba8:	e0bff917 	ldw	r2,-28(fp)
 2801bac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2801bb0:	e0bff617 	ldw	r2,-40(fp)
 2801bb4:	1004c03a 	cmpne	r2,r2,zero
 2801bb8:	1000061e 	bne	r2,zero,2801bd4 <open+0xf0>
 2801bbc:	e13ff917 	ldw	r4,-28(fp)
 2801bc0:	28019ec0 	call	28019ec <alt_file_locked>
 2801bc4:	e0bff715 	stw	r2,-36(fp)
 2801bc8:	e0bff717 	ldw	r2,-36(fp)
 2801bcc:	1004803a 	cmplt	r2,r2,zero
 2801bd0:	1000131e 	bne	r2,zero,2801c20 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2801bd4:	e0bffa17 	ldw	r2,-24(fp)
 2801bd8:	10800317 	ldw	r2,12(r2)
 2801bdc:	1005003a 	cmpeq	r2,r2,zero
 2801be0:	1000091e 	bne	r2,zero,2801c08 <open+0x124>
 2801be4:	e0bffa17 	ldw	r2,-24(fp)
 2801be8:	10800317 	ldw	r2,12(r2)
 2801bec:	e13ff917 	ldw	r4,-28(fp)
 2801bf0:	e17ffb17 	ldw	r5,-20(fp)
 2801bf4:	e1bffc17 	ldw	r6,-16(fp)
 2801bf8:	e1fffd17 	ldw	r7,-12(fp)
 2801bfc:	103ee83a 	callr	r2
 2801c00:	e0bfff15 	stw	r2,-4(fp)
 2801c04:	00000106 	br	2801c0c <open+0x128>
 2801c08:	e03fff15 	stw	zero,-4(fp)
 2801c0c:	e0bfff17 	ldw	r2,-4(fp)
 2801c10:	e0bff715 	stw	r2,-36(fp)
 2801c14:	00000206 	br	2801c20 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2801c18:	00bffb44 	movi	r2,-19
 2801c1c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2801c20:	e0bff717 	ldw	r2,-36(fp)
 2801c24:	1004403a 	cmpge	r2,r2,zero
 2801c28:	1000091e 	bne	r2,zero,2801c50 <open+0x16c>
  {
    alt_release_fd (index);  
 2801c2c:	e13ff817 	ldw	r4,-32(fp)
 2801c30:	2801cd00 	call	2801cd0 <alt_release_fd>
    ALT_ERRNO = -status;
 2801c34:	2801c700 	call	2801c70 <alt_get_errno>
 2801c38:	e0fff717 	ldw	r3,-36(fp)
 2801c3c:	00c7c83a 	sub	r3,zero,r3
 2801c40:	10c00015 	stw	r3,0(r2)
    return -1;
 2801c44:	00bfffc4 	movi	r2,-1
 2801c48:	e0bffe15 	stw	r2,-8(fp)
 2801c4c:	00000206 	br	2801c58 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 2801c50:	e0bff817 	ldw	r2,-32(fp)
 2801c54:	e0bffe15 	stw	r2,-8(fp)
 2801c58:	e0bffe17 	ldw	r2,-8(fp)
}
 2801c5c:	e037883a 	mov	sp,fp
 2801c60:	dfc00117 	ldw	ra,4(sp)
 2801c64:	df000017 	ldw	fp,0(sp)
 2801c68:	dec00204 	addi	sp,sp,8
 2801c6c:	f800283a 	ret

02801c70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2801c70:	defffd04 	addi	sp,sp,-12
 2801c74:	dfc00215 	stw	ra,8(sp)
 2801c78:	df000115 	stw	fp,4(sp)
 2801c7c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2801c80:	0080a034 	movhi	r2,640
 2801c84:	108fa004 	addi	r2,r2,16000
 2801c88:	10800017 	ldw	r2,0(r2)
 2801c8c:	1005003a 	cmpeq	r2,r2,zero
 2801c90:	1000061e 	bne	r2,zero,2801cac <alt_get_errno+0x3c>
 2801c94:	0080a034 	movhi	r2,640
 2801c98:	108fa004 	addi	r2,r2,16000
 2801c9c:	10800017 	ldw	r2,0(r2)
 2801ca0:	103ee83a 	callr	r2
 2801ca4:	e0bfff15 	stw	r2,-4(fp)
 2801ca8:	00000306 	br	2801cb8 <alt_get_errno+0x48>
 2801cac:	0080a034 	movhi	r2,640
 2801cb0:	10953904 	addi	r2,r2,21732
 2801cb4:	e0bfff15 	stw	r2,-4(fp)
 2801cb8:	e0bfff17 	ldw	r2,-4(fp)
}
 2801cbc:	e037883a 	mov	sp,fp
 2801cc0:	dfc00117 	ldw	ra,4(sp)
 2801cc4:	df000017 	ldw	fp,0(sp)
 2801cc8:	dec00204 	addi	sp,sp,8
 2801ccc:	f800283a 	ret

02801cd0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2801cd0:	defffc04 	addi	sp,sp,-16
 2801cd4:	dfc00315 	stw	ra,12(sp)
 2801cd8:	df000215 	stw	fp,8(sp)
 2801cdc:	dc000115 	stw	r16,4(sp)
 2801ce0:	df000104 	addi	fp,sp,4
 2801ce4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2801ce8:	e0bfff17 	ldw	r2,-4(fp)
 2801cec:	108000d0 	cmplti	r2,r2,3
 2801cf0:	10000f1e 	bne	r2,zero,2801d30 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 2801cf4:	e13fff17 	ldw	r4,-4(fp)
 2801cf8:	0400a034 	movhi	r16,640
 2801cfc:	840e3b04 	addi	r16,r16,14572
 2801d00:	01400304 	movi	r5,12
 2801d04:	28027980 	call	2802798 <__mulsi3>
 2801d08:	1405883a 	add	r2,r2,r16
 2801d0c:	10800204 	addi	r2,r2,8
 2801d10:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2801d14:	e13fff17 	ldw	r4,-4(fp)
 2801d18:	0400a034 	movhi	r16,640
 2801d1c:	840e3b04 	addi	r16,r16,14572
 2801d20:	01400304 	movi	r5,12
 2801d24:	28027980 	call	2802798 <__mulsi3>
 2801d28:	1405883a 	add	r2,r2,r16
 2801d2c:	10000015 	stw	zero,0(r2)
  }
}
 2801d30:	e037883a 	mov	sp,fp
 2801d34:	dfc00217 	ldw	ra,8(sp)
 2801d38:	df000117 	ldw	fp,4(sp)
 2801d3c:	dc000017 	ldw	r16,0(sp)
 2801d40:	dec00304 	addi	sp,sp,12
 2801d44:	f800283a 	ret

02801d48 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2801d48:	defffa04 	addi	sp,sp,-24
 2801d4c:	df000515 	stw	fp,20(sp)
 2801d50:	df000504 	addi	fp,sp,20
 2801d54:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2801d58:	0005303a 	rdctl	r2,status
 2801d5c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2801d60:	e0fffd17 	ldw	r3,-12(fp)
 2801d64:	00bfff84 	movi	r2,-2
 2801d68:	1884703a 	and	r2,r3,r2
 2801d6c:	1001703a 	wrctl	status,r2
  
  return context;
 2801d70:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2801d74:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 2801d78:	e0bfff17 	ldw	r2,-4(fp)
 2801d7c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2801d80:	e0bffc17 	ldw	r2,-16(fp)
 2801d84:	10c00017 	ldw	r3,0(r2)
 2801d88:	e0bffc17 	ldw	r2,-16(fp)
 2801d8c:	10800117 	ldw	r2,4(r2)
 2801d90:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 2801d94:	e0bffc17 	ldw	r2,-16(fp)
 2801d98:	10c00117 	ldw	r3,4(r2)
 2801d9c:	e0bffc17 	ldw	r2,-16(fp)
 2801da0:	10800017 	ldw	r2,0(r2)
 2801da4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2801da8:	e0fffc17 	ldw	r3,-16(fp)
 2801dac:	e0bffc17 	ldw	r2,-16(fp)
 2801db0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 2801db4:	e0fffc17 	ldw	r3,-16(fp)
 2801db8:	e0bffc17 	ldw	r2,-16(fp)
 2801dbc:	18800015 	stw	r2,0(r3)
 2801dc0:	e0bffe17 	ldw	r2,-8(fp)
 2801dc4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2801dc8:	e0bffb17 	ldw	r2,-20(fp)
 2801dcc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2801dd0:	e037883a 	mov	sp,fp
 2801dd4:	df000017 	ldw	fp,0(sp)
 2801dd8:	dec00104 	addi	sp,sp,4
 2801ddc:	f800283a 	ret

02801de0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2801de0:	defffb04 	addi	sp,sp,-20
 2801de4:	dfc00415 	stw	ra,16(sp)
 2801de8:	df000315 	stw	fp,12(sp)
 2801dec:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2801df0:	d0a00717 	ldw	r2,-32740(gp)
 2801df4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2801df8:	d0a59d17 	ldw	r2,-27020(gp)
 2801dfc:	10800044 	addi	r2,r2,1
 2801e00:	d0a59d15 	stw	r2,-27020(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2801e04:	00003106 	br	2801ecc <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 2801e08:	e0bffe17 	ldw	r2,-8(fp)
 2801e0c:	10800017 	ldw	r2,0(r2)
 2801e10:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2801e14:	e0bffe17 	ldw	r2,-8(fp)
 2801e18:	10800403 	ldbu	r2,16(r2)
 2801e1c:	10803fcc 	andi	r2,r2,255
 2801e20:	1005003a 	cmpeq	r2,r2,zero
 2801e24:	1000051e 	bne	r2,zero,2801e3c <alt_tick+0x5c>
 2801e28:	d0a59d17 	ldw	r2,-27020(gp)
 2801e2c:	1004c03a 	cmpne	r2,r2,zero
 2801e30:	1000021e 	bne	r2,zero,2801e3c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 2801e34:	e0bffe17 	ldw	r2,-8(fp)
 2801e38:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2801e3c:	e0bffe17 	ldw	r2,-8(fp)
 2801e40:	10c00217 	ldw	r3,8(r2)
 2801e44:	d0a59d17 	ldw	r2,-27020(gp)
 2801e48:	10c01e36 	bltu	r2,r3,2801ec4 <alt_tick+0xe4>
 2801e4c:	e0bffe17 	ldw	r2,-8(fp)
 2801e50:	10800403 	ldbu	r2,16(r2)
 2801e54:	10803fcc 	andi	r2,r2,255
 2801e58:	1004c03a 	cmpne	r2,r2,zero
 2801e5c:	1000191e 	bne	r2,zero,2801ec4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 2801e60:	e0bffe17 	ldw	r2,-8(fp)
 2801e64:	10c00317 	ldw	r3,12(r2)
 2801e68:	e0bffe17 	ldw	r2,-8(fp)
 2801e6c:	11000517 	ldw	r4,20(r2)
 2801e70:	183ee83a 	callr	r3
 2801e74:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2801e78:	e0bffd17 	ldw	r2,-12(fp)
 2801e7c:	1004c03a 	cmpne	r2,r2,zero
 2801e80:	1000031e 	bne	r2,zero,2801e90 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 2801e84:	e13ffe17 	ldw	r4,-8(fp)
 2801e88:	2801d480 	call	2801d48 <alt_alarm_stop>
 2801e8c:	00000d06 	br	2801ec4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 2801e90:	e0bffe17 	ldw	r2,-8(fp)
 2801e94:	10c00217 	ldw	r3,8(r2)
 2801e98:	e0bffd17 	ldw	r2,-12(fp)
 2801e9c:	1887883a 	add	r3,r3,r2
 2801ea0:	e0bffe17 	ldw	r2,-8(fp)
 2801ea4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2801ea8:	e0bffe17 	ldw	r2,-8(fp)
 2801eac:	10c00217 	ldw	r3,8(r2)
 2801eb0:	d0a59d17 	ldw	r2,-27020(gp)
 2801eb4:	1880032e 	bgeu	r3,r2,2801ec4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 2801eb8:	e0fffe17 	ldw	r3,-8(fp)
 2801ebc:	00800044 	movi	r2,1
 2801ec0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 2801ec4:	e0bfff17 	ldw	r2,-4(fp)
 2801ec8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2801ecc:	d0e00704 	addi	r3,gp,-32740
 2801ed0:	e0bffe17 	ldw	r2,-8(fp)
 2801ed4:	10ffcc1e 	bne	r2,r3,2801e08 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 2801ed8:	e037883a 	mov	sp,fp
 2801edc:	dfc00117 	ldw	ra,4(sp)
 2801ee0:	df000017 	ldw	fp,0(sp)
 2801ee4:	dec00204 	addi	sp,sp,8
 2801ee8:	f800283a 	ret

02801eec <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 2801eec:	deffff04 	addi	sp,sp,-4
 2801ef0:	df000015 	stw	fp,0(sp)
 2801ef4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2801ef8:	000170fa 	wrctl	ienable,zero
}
 2801efc:	e037883a 	mov	sp,fp
 2801f00:	df000017 	ldw	fp,0(sp)
 2801f04:	dec00104 	addi	sp,sp,4
 2801f08:	f800283a 	ret

02801f0c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2801f0c:	defff904 	addi	sp,sp,-28
 2801f10:	dfc00615 	stw	ra,24(sp)
 2801f14:	df000515 	stw	fp,20(sp)
 2801f18:	df000504 	addi	fp,sp,20
 2801f1c:	e13ffd15 	stw	r4,-12(fp)
 2801f20:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2801f24:	e0bffe17 	ldw	r2,-8(fp)
 2801f28:	10800017 	ldw	r2,0(r2)
 2801f2c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2801f30:	e13ffd17 	ldw	r4,-12(fp)
 2801f34:	28022f00 	call	28022f0 <strlen>
 2801f38:	10800044 	addi	r2,r2,1
 2801f3c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2801f40:	00000d06 	br	2801f78 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2801f44:	e0bffc17 	ldw	r2,-16(fp)
 2801f48:	11000217 	ldw	r4,8(r2)
 2801f4c:	e1bffb17 	ldw	r6,-20(fp)
 2801f50:	e17ffd17 	ldw	r5,-12(fp)
 2801f54:	28021dc0 	call	28021dc <memcmp>
 2801f58:	1004c03a 	cmpne	r2,r2,zero
 2801f5c:	1000031e 	bne	r2,zero,2801f6c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2801f60:	e0bffc17 	ldw	r2,-16(fp)
 2801f64:	e0bfff15 	stw	r2,-4(fp)
 2801f68:	00000706 	br	2801f88 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2801f6c:	e0bffc17 	ldw	r2,-16(fp)
 2801f70:	10800017 	ldw	r2,0(r2)
 2801f74:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2801f78:	e0fffe17 	ldw	r3,-8(fp)
 2801f7c:	e0bffc17 	ldw	r2,-16(fp)
 2801f80:	10fff01e 	bne	r2,r3,2801f44 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2801f84:	e03fff15 	stw	zero,-4(fp)
 2801f88:	e0bfff17 	ldw	r2,-4(fp)
}
 2801f8c:	e037883a 	mov	sp,fp
 2801f90:	dfc00117 	ldw	ra,4(sp)
 2801f94:	df000017 	ldw	fp,0(sp)
 2801f98:	dec00204 	addi	sp,sp,8
 2801f9c:	f800283a 	ret

02801fa0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2801fa0:	defffa04 	addi	sp,sp,-24
 2801fa4:	dfc00515 	stw	ra,20(sp)
 2801fa8:	df000415 	stw	fp,16(sp)
 2801fac:	df000404 	addi	fp,sp,16
 2801fb0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2801fb4:	0080a034 	movhi	r2,640
 2801fb8:	108f9b04 	addi	r2,r2,15980
 2801fbc:	10800017 	ldw	r2,0(r2)
 2801fc0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2801fc4:	00003306 	br	2802094 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 2801fc8:	e0bffd17 	ldw	r2,-12(fp)
 2801fcc:	11000217 	ldw	r4,8(r2)
 2801fd0:	28022f00 	call	28022f0 <strlen>
 2801fd4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 2801fd8:	e0bffd17 	ldw	r2,-12(fp)
 2801fdc:	10c00217 	ldw	r3,8(r2)
 2801fe0:	e0bffc17 	ldw	r2,-16(fp)
 2801fe4:	1885883a 	add	r2,r3,r2
 2801fe8:	10bfffc4 	addi	r2,r2,-1
 2801fec:	10800003 	ldbu	r2,0(r2)
 2801ff0:	10803fcc 	andi	r2,r2,255
 2801ff4:	1080201c 	xori	r2,r2,128
 2801ff8:	10bfe004 	addi	r2,r2,-128
 2801ffc:	10800bd8 	cmpnei	r2,r2,47
 2802000:	1000031e 	bne	r2,zero,2802010 <alt_find_file+0x70>
    {
      len -= 1;
 2802004:	e0bffc17 	ldw	r2,-16(fp)
 2802008:	10bfffc4 	addi	r2,r2,-1
 280200c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2802010:	e0bffc17 	ldw	r2,-16(fp)
 2802014:	1007883a 	mov	r3,r2
 2802018:	e0bffe17 	ldw	r2,-8(fp)
 280201c:	1885883a 	add	r2,r3,r2
 2802020:	10800003 	ldbu	r2,0(r2)
 2802024:	10803fcc 	andi	r2,r2,255
 2802028:	1080201c 	xori	r2,r2,128
 280202c:	10bfe004 	addi	r2,r2,-128
 2802030:	10800be0 	cmpeqi	r2,r2,47
 2802034:	10000a1e 	bne	r2,zero,2802060 <alt_find_file+0xc0>
 2802038:	e0bffc17 	ldw	r2,-16(fp)
 280203c:	1007883a 	mov	r3,r2
 2802040:	e0bffe17 	ldw	r2,-8(fp)
 2802044:	1885883a 	add	r2,r3,r2
 2802048:	10800003 	ldbu	r2,0(r2)
 280204c:	10803fcc 	andi	r2,r2,255
 2802050:	1080201c 	xori	r2,r2,128
 2802054:	10bfe004 	addi	r2,r2,-128
 2802058:	1004c03a 	cmpne	r2,r2,zero
 280205c:	10000a1e 	bne	r2,zero,2802088 <alt_find_file+0xe8>
 2802060:	e0bffd17 	ldw	r2,-12(fp)
 2802064:	11000217 	ldw	r4,8(r2)
 2802068:	e1bffc17 	ldw	r6,-16(fp)
 280206c:	e17ffe17 	ldw	r5,-8(fp)
 2802070:	28021dc0 	call	28021dc <memcmp>
 2802074:	1004c03a 	cmpne	r2,r2,zero
 2802078:	1000031e 	bne	r2,zero,2802088 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 280207c:	e0bffd17 	ldw	r2,-12(fp)
 2802080:	e0bfff15 	stw	r2,-4(fp)
 2802084:	00000806 	br	28020a8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 2802088:	e0bffd17 	ldw	r2,-12(fp)
 280208c:	10800017 	ldw	r2,0(r2)
 2802090:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2802094:	00c0a034 	movhi	r3,640
 2802098:	18cf9b04 	addi	r3,r3,15980
 280209c:	e0bffd17 	ldw	r2,-12(fp)
 28020a0:	10ffc91e 	bne	r2,r3,2801fc8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 28020a4:	e03fff15 	stw	zero,-4(fp)
 28020a8:	e0bfff17 	ldw	r2,-4(fp)
}
 28020ac:	e037883a 	mov	sp,fp
 28020b0:	dfc00117 	ldw	ra,4(sp)
 28020b4:	df000017 	ldw	fp,0(sp)
 28020b8:	dec00204 	addi	sp,sp,8
 28020bc:	f800283a 	ret

028020c0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 28020c0:	defffa04 	addi	sp,sp,-24
 28020c4:	dfc00515 	stw	ra,20(sp)
 28020c8:	df000415 	stw	fp,16(sp)
 28020cc:	dc000315 	stw	r16,12(sp)
 28020d0:	df000304 	addi	fp,sp,12
 28020d4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 28020d8:	00bffa04 	movi	r2,-24
 28020dc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 28020e0:	e03ffe15 	stw	zero,-8(fp)
 28020e4:	00002006 	br	2802168 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 28020e8:	e13ffe17 	ldw	r4,-8(fp)
 28020ec:	0400a034 	movhi	r16,640
 28020f0:	840e3b04 	addi	r16,r16,14572
 28020f4:	01400304 	movi	r5,12
 28020f8:	28027980 	call	2802798 <__mulsi3>
 28020fc:	1405883a 	add	r2,r2,r16
 2802100:	10800017 	ldw	r2,0(r2)
 2802104:	1004c03a 	cmpne	r2,r2,zero
 2802108:	1000141e 	bne	r2,zero,280215c <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 280210c:	e13ffe17 	ldw	r4,-8(fp)
 2802110:	0400a034 	movhi	r16,640
 2802114:	840e3b04 	addi	r16,r16,14572
 2802118:	01400304 	movi	r5,12
 280211c:	28027980 	call	2802798 <__mulsi3>
 2802120:	1407883a 	add	r3,r2,r16
 2802124:	e0bfff17 	ldw	r2,-4(fp)
 2802128:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 280212c:	0080a034 	movhi	r2,640
 2802130:	108f9f04 	addi	r2,r2,15996
 2802134:	10c00017 	ldw	r3,0(r2)
 2802138:	e0bffe17 	ldw	r2,-8(fp)
 280213c:	1880040e 	bge	r3,r2,2802150 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 2802140:	00c0a034 	movhi	r3,640
 2802144:	18cf9f04 	addi	r3,r3,15996
 2802148:	e0bffe17 	ldw	r2,-8(fp)
 280214c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 2802150:	e0bffe17 	ldw	r2,-8(fp)
 2802154:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 2802158:	00000606 	br	2802174 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 280215c:	e0bffe17 	ldw	r2,-8(fp)
 2802160:	10800044 	addi	r2,r2,1
 2802164:	e0bffe15 	stw	r2,-8(fp)
 2802168:	e0bffe17 	ldw	r2,-8(fp)
 280216c:	10800810 	cmplti	r2,r2,32
 2802170:	103fdd1e 	bne	r2,zero,28020e8 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 2802174:	e0bffd17 	ldw	r2,-12(fp)
}
 2802178:	e037883a 	mov	sp,fp
 280217c:	dfc00217 	ldw	ra,8(sp)
 2802180:	df000117 	ldw	fp,4(sp)
 2802184:	dc000017 	ldw	r16,0(sp)
 2802188:	dec00304 	addi	sp,sp,12
 280218c:	f800283a 	ret

02802190 <atexit>:
 2802190:	200b883a 	mov	r5,r4
 2802194:	000d883a 	mov	r6,zero
 2802198:	0009883a 	mov	r4,zero
 280219c:	000f883a 	mov	r7,zero
 28021a0:	28023641 	jmpi	2802364 <__register_exitproc>

028021a4 <exit>:
 28021a4:	defffe04 	addi	sp,sp,-8
 28021a8:	000b883a 	mov	r5,zero
 28021ac:	dc000015 	stw	r16,0(sp)
 28021b0:	dfc00115 	stw	ra,4(sp)
 28021b4:	2021883a 	mov	r16,r4
 28021b8:	280249c0 	call	280249c <__call_exitprocs>
 28021bc:	0080a034 	movhi	r2,640
 28021c0:	108fa504 	addi	r2,r2,16020
 28021c4:	11000017 	ldw	r4,0(r2)
 28021c8:	20800f17 	ldw	r2,60(r4)
 28021cc:	10000126 	beq	r2,zero,28021d4 <exit+0x30>
 28021d0:	103ee83a 	callr	r2
 28021d4:	8009883a 	mov	r4,r16
 28021d8:	28028100 	call	2802810 <_exit>

028021dc <memcmp>:
 28021dc:	00c000c4 	movi	r3,3
 28021e0:	1980032e 	bgeu	r3,r6,28021f0 <memcmp+0x14>
 28021e4:	2144b03a 	or	r2,r4,r5
 28021e8:	10c4703a 	and	r2,r2,r3
 28021ec:	10000f26 	beq	r2,zero,280222c <memcmp+0x50>
 28021f0:	31ffffc4 	addi	r7,r6,-1
 28021f4:	3000061e 	bne	r6,zero,2802210 <memcmp+0x34>
 28021f8:	00000a06 	br	2802224 <memcmp+0x48>
 28021fc:	39ffffc4 	addi	r7,r7,-1
 2802200:	00bfffc4 	movi	r2,-1
 2802204:	21000044 	addi	r4,r4,1
 2802208:	29400044 	addi	r5,r5,1
 280220c:	38800526 	beq	r7,r2,2802224 <memcmp+0x48>
 2802210:	20c00003 	ldbu	r3,0(r4)
 2802214:	28800003 	ldbu	r2,0(r5)
 2802218:	18bff826 	beq	r3,r2,28021fc <memcmp+0x20>
 280221c:	1885c83a 	sub	r2,r3,r2
 2802220:	f800283a 	ret
 2802224:	0005883a 	mov	r2,zero
 2802228:	f800283a 	ret
 280222c:	180f883a 	mov	r7,r3
 2802230:	20c00017 	ldw	r3,0(r4)
 2802234:	28800017 	ldw	r2,0(r5)
 2802238:	18bfed1e 	bne	r3,r2,28021f0 <memcmp+0x14>
 280223c:	31bfff04 	addi	r6,r6,-4
 2802240:	21000104 	addi	r4,r4,4
 2802244:	29400104 	addi	r5,r5,4
 2802248:	39bff936 	bltu	r7,r6,2802230 <memcmp+0x54>
 280224c:	003fe806 	br	28021f0 <memcmp+0x14>

02802250 <memcpy>:
 2802250:	01c003c4 	movi	r7,15
 2802254:	2007883a 	mov	r3,r4
 2802258:	3980032e 	bgeu	r7,r6,2802268 <memcpy+0x18>
 280225c:	2904b03a 	or	r2,r5,r4
 2802260:	108000cc 	andi	r2,r2,3
 2802264:	10000926 	beq	r2,zero,280228c <memcpy+0x3c>
 2802268:	30000626 	beq	r6,zero,2802284 <memcpy+0x34>
 280226c:	30cd883a 	add	r6,r6,r3
 2802270:	28800003 	ldbu	r2,0(r5)
 2802274:	29400044 	addi	r5,r5,1
 2802278:	18800005 	stb	r2,0(r3)
 280227c:	18c00044 	addi	r3,r3,1
 2802280:	30fffb1e 	bne	r6,r3,2802270 <memcpy+0x20>
 2802284:	2005883a 	mov	r2,r4
 2802288:	f800283a 	ret
 280228c:	3811883a 	mov	r8,r7
 2802290:	200f883a 	mov	r7,r4
 2802294:	28c00017 	ldw	r3,0(r5)
 2802298:	31bffc04 	addi	r6,r6,-16
 280229c:	38c00015 	stw	r3,0(r7)
 28022a0:	28800117 	ldw	r2,4(r5)
 28022a4:	38800115 	stw	r2,4(r7)
 28022a8:	28c00217 	ldw	r3,8(r5)
 28022ac:	38c00215 	stw	r3,8(r7)
 28022b0:	28800317 	ldw	r2,12(r5)
 28022b4:	29400404 	addi	r5,r5,16
 28022b8:	38800315 	stw	r2,12(r7)
 28022bc:	39c00404 	addi	r7,r7,16
 28022c0:	41bff436 	bltu	r8,r6,2802294 <memcpy+0x44>
 28022c4:	008000c4 	movi	r2,3
 28022c8:	1180072e 	bgeu	r2,r6,28022e8 <memcpy+0x98>
 28022cc:	1007883a 	mov	r3,r2
 28022d0:	28800017 	ldw	r2,0(r5)
 28022d4:	31bfff04 	addi	r6,r6,-4
 28022d8:	29400104 	addi	r5,r5,4
 28022dc:	38800015 	stw	r2,0(r7)
 28022e0:	39c00104 	addi	r7,r7,4
 28022e4:	19bffa36 	bltu	r3,r6,28022d0 <memcpy+0x80>
 28022e8:	3807883a 	mov	r3,r7
 28022ec:	003fde06 	br	2802268 <memcpy+0x18>

028022f0 <strlen>:
 28022f0:	208000cc 	andi	r2,r4,3
 28022f4:	2011883a 	mov	r8,r4
 28022f8:	1000161e 	bne	r2,zero,2802354 <strlen+0x64>
 28022fc:	20c00017 	ldw	r3,0(r4)
 2802300:	017fbff4 	movhi	r5,65279
 2802304:	297fbfc4 	addi	r5,r5,-257
 2802308:	01e02074 	movhi	r7,32897
 280230c:	39e02004 	addi	r7,r7,-32640
 2802310:	1945883a 	add	r2,r3,r5
 2802314:	11c4703a 	and	r2,r2,r7
 2802318:	00c6303a 	nor	r3,zero,r3
 280231c:	1886703a 	and	r3,r3,r2
 2802320:	18000c1e 	bne	r3,zero,2802354 <strlen+0x64>
 2802324:	280d883a 	mov	r6,r5
 2802328:	380b883a 	mov	r5,r7
 280232c:	21000104 	addi	r4,r4,4
 2802330:	20800017 	ldw	r2,0(r4)
 2802334:	1187883a 	add	r3,r2,r6
 2802338:	1946703a 	and	r3,r3,r5
 280233c:	0084303a 	nor	r2,zero,r2
 2802340:	10c4703a 	and	r2,r2,r3
 2802344:	103ff926 	beq	r2,zero,280232c <strlen+0x3c>
 2802348:	20800007 	ldb	r2,0(r4)
 280234c:	10000326 	beq	r2,zero,280235c <strlen+0x6c>
 2802350:	21000044 	addi	r4,r4,1
 2802354:	20800007 	ldb	r2,0(r4)
 2802358:	103ffd1e 	bne	r2,zero,2802350 <strlen+0x60>
 280235c:	2205c83a 	sub	r2,r4,r8
 2802360:	f800283a 	ret

02802364 <__register_exitproc>:
 2802364:	defffa04 	addi	sp,sp,-24
 2802368:	0080a034 	movhi	r2,640
 280236c:	108fa504 	addi	r2,r2,16020
 2802370:	dc000015 	stw	r16,0(sp)
 2802374:	14000017 	ldw	r16,0(r2)
 2802378:	dd000415 	stw	r20,16(sp)
 280237c:	2829883a 	mov	r20,r5
 2802380:	81405217 	ldw	r5,328(r16)
 2802384:	dcc00315 	stw	r19,12(sp)
 2802388:	dc800215 	stw	r18,8(sp)
 280238c:	dc400115 	stw	r17,4(sp)
 2802390:	dfc00515 	stw	ra,20(sp)
 2802394:	2023883a 	mov	r17,r4
 2802398:	3027883a 	mov	r19,r6
 280239c:	3825883a 	mov	r18,r7
 28023a0:	28002526 	beq	r5,zero,2802438 <__register_exitproc+0xd4>
 28023a4:	29000117 	ldw	r4,4(r5)
 28023a8:	008007c4 	movi	r2,31
 28023ac:	11002716 	blt	r2,r4,280244c <__register_exitproc+0xe8>
 28023b0:	8800101e 	bne	r17,zero,28023f4 <__register_exitproc+0x90>
 28023b4:	2105883a 	add	r2,r4,r4
 28023b8:	1085883a 	add	r2,r2,r2
 28023bc:	20c00044 	addi	r3,r4,1
 28023c0:	1145883a 	add	r2,r2,r5
 28023c4:	0009883a 	mov	r4,zero
 28023c8:	15000215 	stw	r20,8(r2)
 28023cc:	28c00115 	stw	r3,4(r5)
 28023d0:	2005883a 	mov	r2,r4
 28023d4:	dfc00517 	ldw	ra,20(sp)
 28023d8:	dd000417 	ldw	r20,16(sp)
 28023dc:	dcc00317 	ldw	r19,12(sp)
 28023e0:	dc800217 	ldw	r18,8(sp)
 28023e4:	dc400117 	ldw	r17,4(sp)
 28023e8:	dc000017 	ldw	r16,0(sp)
 28023ec:	dec00604 	addi	sp,sp,24
 28023f0:	f800283a 	ret
 28023f4:	29802204 	addi	r6,r5,136
 28023f8:	00800044 	movi	r2,1
 28023fc:	110e983a 	sll	r7,r2,r4
 2802400:	30c04017 	ldw	r3,256(r6)
 2802404:	2105883a 	add	r2,r4,r4
 2802408:	1085883a 	add	r2,r2,r2
 280240c:	1185883a 	add	r2,r2,r6
 2802410:	19c6b03a 	or	r3,r3,r7
 2802414:	14802015 	stw	r18,128(r2)
 2802418:	14c00015 	stw	r19,0(r2)
 280241c:	00800084 	movi	r2,2
 2802420:	30c04015 	stw	r3,256(r6)
 2802424:	88bfe31e 	bne	r17,r2,28023b4 <__register_exitproc+0x50>
 2802428:	30804117 	ldw	r2,260(r6)
 280242c:	11c4b03a 	or	r2,r2,r7
 2802430:	30804115 	stw	r2,260(r6)
 2802434:	003fdf06 	br	28023b4 <__register_exitproc+0x50>
 2802438:	0080a034 	movhi	r2,640
 280243c:	10957a04 	addi	r2,r2,21992
 2802440:	100b883a 	mov	r5,r2
 2802444:	80805215 	stw	r2,328(r16)
 2802448:	003fd606 	br	28023a4 <__register_exitproc+0x40>
 280244c:	00800034 	movhi	r2,0
 2802450:	10800004 	addi	r2,r2,0
 2802454:	1000021e 	bne	r2,zero,2802460 <__register_exitproc+0xfc>
 2802458:	013fffc4 	movi	r4,-1
 280245c:	003fdc06 	br	28023d0 <__register_exitproc+0x6c>
 2802460:	01006404 	movi	r4,400
 2802464:	103ee83a 	callr	r2
 2802468:	1007883a 	mov	r3,r2
 280246c:	103ffa26 	beq	r2,zero,2802458 <__register_exitproc+0xf4>
 2802470:	80805217 	ldw	r2,328(r16)
 2802474:	180b883a 	mov	r5,r3
 2802478:	18000115 	stw	zero,4(r3)
 280247c:	18800015 	stw	r2,0(r3)
 2802480:	80c05215 	stw	r3,328(r16)
 2802484:	18006215 	stw	zero,392(r3)
 2802488:	18006315 	stw	zero,396(r3)
 280248c:	0009883a 	mov	r4,zero
 2802490:	883fc826 	beq	r17,zero,28023b4 <__register_exitproc+0x50>
 2802494:	003fd706 	br	28023f4 <__register_exitproc+0x90>

02802498 <register_fini>:
 2802498:	f800283a 	ret

0280249c <__call_exitprocs>:
 280249c:	0080a034 	movhi	r2,640
 28024a0:	108fa504 	addi	r2,r2,16020
 28024a4:	10800017 	ldw	r2,0(r2)
 28024a8:	defff304 	addi	sp,sp,-52
 28024ac:	df000b15 	stw	fp,44(sp)
 28024b0:	d8800115 	stw	r2,4(sp)
 28024b4:	00800034 	movhi	r2,0
 28024b8:	10800004 	addi	r2,r2,0
 28024bc:	1005003a 	cmpeq	r2,r2,zero
 28024c0:	d8800215 	stw	r2,8(sp)
 28024c4:	d8800117 	ldw	r2,4(sp)
 28024c8:	dd400815 	stw	r21,32(sp)
 28024cc:	dd000715 	stw	r20,28(sp)
 28024d0:	10805204 	addi	r2,r2,328
 28024d4:	dfc00c15 	stw	ra,48(sp)
 28024d8:	ddc00a15 	stw	r23,40(sp)
 28024dc:	dd800915 	stw	r22,36(sp)
 28024e0:	dcc00615 	stw	r19,24(sp)
 28024e4:	dc800515 	stw	r18,20(sp)
 28024e8:	dc400415 	stw	r17,16(sp)
 28024ec:	dc000315 	stw	r16,12(sp)
 28024f0:	282b883a 	mov	r21,r5
 28024f4:	2039883a 	mov	fp,r4
 28024f8:	d8800015 	stw	r2,0(sp)
 28024fc:	2829003a 	cmpeq	r20,r5,zero
 2802500:	d8800117 	ldw	r2,4(sp)
 2802504:	14405217 	ldw	r17,328(r2)
 2802508:	88001026 	beq	r17,zero,280254c <__call_exitprocs+0xb0>
 280250c:	ddc00017 	ldw	r23,0(sp)
 2802510:	88800117 	ldw	r2,4(r17)
 2802514:	8c802204 	addi	r18,r17,136
 2802518:	143fffc4 	addi	r16,r2,-1
 280251c:	80000916 	blt	r16,zero,2802544 <__call_exitprocs+0xa8>
 2802520:	05bfffc4 	movi	r22,-1
 2802524:	a000151e 	bne	r20,zero,280257c <__call_exitprocs+0xe0>
 2802528:	8409883a 	add	r4,r16,r16
 280252c:	2105883a 	add	r2,r4,r4
 2802530:	1485883a 	add	r2,r2,r18
 2802534:	10c02017 	ldw	r3,128(r2)
 2802538:	a8c01126 	beq	r21,r3,2802580 <__call_exitprocs+0xe4>
 280253c:	843fffc4 	addi	r16,r16,-1
 2802540:	85bff81e 	bne	r16,r22,2802524 <__call_exitprocs+0x88>
 2802544:	d8800217 	ldw	r2,8(sp)
 2802548:	10003126 	beq	r2,zero,2802610 <__call_exitprocs+0x174>
 280254c:	dfc00c17 	ldw	ra,48(sp)
 2802550:	df000b17 	ldw	fp,44(sp)
 2802554:	ddc00a17 	ldw	r23,40(sp)
 2802558:	dd800917 	ldw	r22,36(sp)
 280255c:	dd400817 	ldw	r21,32(sp)
 2802560:	dd000717 	ldw	r20,28(sp)
 2802564:	dcc00617 	ldw	r19,24(sp)
 2802568:	dc800517 	ldw	r18,20(sp)
 280256c:	dc400417 	ldw	r17,16(sp)
 2802570:	dc000317 	ldw	r16,12(sp)
 2802574:	dec00d04 	addi	sp,sp,52
 2802578:	f800283a 	ret
 280257c:	8409883a 	add	r4,r16,r16
 2802580:	88c00117 	ldw	r3,4(r17)
 2802584:	2105883a 	add	r2,r4,r4
 2802588:	1445883a 	add	r2,r2,r17
 280258c:	18ffffc4 	addi	r3,r3,-1
 2802590:	11800217 	ldw	r6,8(r2)
 2802594:	1c001526 	beq	r3,r16,28025ec <__call_exitprocs+0x150>
 2802598:	10000215 	stw	zero,8(r2)
 280259c:	303fe726 	beq	r6,zero,280253c <__call_exitprocs+0xa0>
 28025a0:	00c00044 	movi	r3,1
 28025a4:	1c06983a 	sll	r3,r3,r16
 28025a8:	90804017 	ldw	r2,256(r18)
 28025ac:	8cc00117 	ldw	r19,4(r17)
 28025b0:	1884703a 	and	r2,r3,r2
 28025b4:	10001426 	beq	r2,zero,2802608 <__call_exitprocs+0x16c>
 28025b8:	90804117 	ldw	r2,260(r18)
 28025bc:	1884703a 	and	r2,r3,r2
 28025c0:	10000c1e 	bne	r2,zero,28025f4 <__call_exitprocs+0x158>
 28025c4:	2105883a 	add	r2,r4,r4
 28025c8:	1485883a 	add	r2,r2,r18
 28025cc:	11400017 	ldw	r5,0(r2)
 28025d0:	e009883a 	mov	r4,fp
 28025d4:	303ee83a 	callr	r6
 28025d8:	88800117 	ldw	r2,4(r17)
 28025dc:	98bfc81e 	bne	r19,r2,2802500 <__call_exitprocs+0x64>
 28025e0:	b8800017 	ldw	r2,0(r23)
 28025e4:	147fd526 	beq	r2,r17,280253c <__call_exitprocs+0xa0>
 28025e8:	003fc506 	br	2802500 <__call_exitprocs+0x64>
 28025ec:	8c000115 	stw	r16,4(r17)
 28025f0:	003fea06 	br	280259c <__call_exitprocs+0x100>
 28025f4:	2105883a 	add	r2,r4,r4
 28025f8:	1485883a 	add	r2,r2,r18
 28025fc:	11000017 	ldw	r4,0(r2)
 2802600:	303ee83a 	callr	r6
 2802604:	003ff406 	br	28025d8 <__call_exitprocs+0x13c>
 2802608:	303ee83a 	callr	r6
 280260c:	003ff206 	br	28025d8 <__call_exitprocs+0x13c>
 2802610:	88800117 	ldw	r2,4(r17)
 2802614:	1000081e 	bne	r2,zero,2802638 <__call_exitprocs+0x19c>
 2802618:	89000017 	ldw	r4,0(r17)
 280261c:	20000726 	beq	r4,zero,280263c <__call_exitprocs+0x1a0>
 2802620:	b9000015 	stw	r4,0(r23)
 2802624:	8809883a 	mov	r4,r17
 2802628:	00000000 	call	0 <__alt_mem_sdram_ctrl-0x2800000>
 280262c:	bc400017 	ldw	r17,0(r23)
 2802630:	883fb71e 	bne	r17,zero,2802510 <__call_exitprocs+0x74>
 2802634:	003fc506 	br	280254c <__call_exitprocs+0xb0>
 2802638:	89000017 	ldw	r4,0(r17)
 280263c:	882f883a 	mov	r23,r17
 2802640:	2023883a 	mov	r17,r4
 2802644:	883fb21e 	bne	r17,zero,2802510 <__call_exitprocs+0x74>
 2802648:	003fc006 	br	280254c <__call_exitprocs+0xb0>

0280264c <udivmodsi4>:
 280264c:	29001b2e 	bgeu	r5,r4,28026bc <udivmodsi4+0x70>
 2802650:	28001a16 	blt	r5,zero,28026bc <udivmodsi4+0x70>
 2802654:	00800044 	movi	r2,1
 2802658:	0007883a 	mov	r3,zero
 280265c:	01c007c4 	movi	r7,31
 2802660:	00000306 	br	2802670 <udivmodsi4+0x24>
 2802664:	19c01326 	beq	r3,r7,28026b4 <udivmodsi4+0x68>
 2802668:	18c00044 	addi	r3,r3,1
 280266c:	28000416 	blt	r5,zero,2802680 <udivmodsi4+0x34>
 2802670:	294b883a 	add	r5,r5,r5
 2802674:	1085883a 	add	r2,r2,r2
 2802678:	293ffa36 	bltu	r5,r4,2802664 <udivmodsi4+0x18>
 280267c:	10000d26 	beq	r2,zero,28026b4 <udivmodsi4+0x68>
 2802680:	0007883a 	mov	r3,zero
 2802684:	21400236 	bltu	r4,r5,2802690 <udivmodsi4+0x44>
 2802688:	2149c83a 	sub	r4,r4,r5
 280268c:	1886b03a 	or	r3,r3,r2
 2802690:	1004d07a 	srli	r2,r2,1
 2802694:	280ad07a 	srli	r5,r5,1
 2802698:	103ffa1e 	bne	r2,zero,2802684 <udivmodsi4+0x38>
 280269c:	30000226 	beq	r6,zero,28026a8 <udivmodsi4+0x5c>
 28026a0:	2005883a 	mov	r2,r4
 28026a4:	f800283a 	ret
 28026a8:	1809883a 	mov	r4,r3
 28026ac:	2005883a 	mov	r2,r4
 28026b0:	f800283a 	ret
 28026b4:	0007883a 	mov	r3,zero
 28026b8:	003ff806 	br	280269c <udivmodsi4+0x50>
 28026bc:	00800044 	movi	r2,1
 28026c0:	0007883a 	mov	r3,zero
 28026c4:	003fef06 	br	2802684 <udivmodsi4+0x38>

028026c8 <__divsi3>:
 28026c8:	defffe04 	addi	sp,sp,-8
 28026cc:	dc000015 	stw	r16,0(sp)
 28026d0:	dfc00115 	stw	ra,4(sp)
 28026d4:	0021883a 	mov	r16,zero
 28026d8:	20000c16 	blt	r4,zero,280270c <__divsi3+0x44>
 28026dc:	000d883a 	mov	r6,zero
 28026e0:	28000e16 	blt	r5,zero,280271c <__divsi3+0x54>
 28026e4:	280264c0 	call	280264c <udivmodsi4>
 28026e8:	1007883a 	mov	r3,r2
 28026ec:	8005003a 	cmpeq	r2,r16,zero
 28026f0:	1000011e 	bne	r2,zero,28026f8 <__divsi3+0x30>
 28026f4:	00c7c83a 	sub	r3,zero,r3
 28026f8:	1805883a 	mov	r2,r3
 28026fc:	dfc00117 	ldw	ra,4(sp)
 2802700:	dc000017 	ldw	r16,0(sp)
 2802704:	dec00204 	addi	sp,sp,8
 2802708:	f800283a 	ret
 280270c:	0109c83a 	sub	r4,zero,r4
 2802710:	04000044 	movi	r16,1
 2802714:	000d883a 	mov	r6,zero
 2802718:	283ff20e 	bge	r5,zero,28026e4 <__divsi3+0x1c>
 280271c:	014bc83a 	sub	r5,zero,r5
 2802720:	8021003a 	cmpeq	r16,r16,zero
 2802724:	003fef06 	br	28026e4 <__divsi3+0x1c>

02802728 <__modsi3>:
 2802728:	deffff04 	addi	sp,sp,-4
 280272c:	dfc00015 	stw	ra,0(sp)
 2802730:	01800044 	movi	r6,1
 2802734:	2807883a 	mov	r3,r5
 2802738:	20000416 	blt	r4,zero,280274c <__modsi3+0x24>
 280273c:	28000c16 	blt	r5,zero,2802770 <__modsi3+0x48>
 2802740:	dfc00017 	ldw	ra,0(sp)
 2802744:	dec00104 	addi	sp,sp,4
 2802748:	280264c1 	jmpi	280264c <udivmodsi4>
 280274c:	0109c83a 	sub	r4,zero,r4
 2802750:	28000b16 	blt	r5,zero,2802780 <__modsi3+0x58>
 2802754:	180b883a 	mov	r5,r3
 2802758:	01800044 	movi	r6,1
 280275c:	280264c0 	call	280264c <udivmodsi4>
 2802760:	0085c83a 	sub	r2,zero,r2
 2802764:	dfc00017 	ldw	ra,0(sp)
 2802768:	dec00104 	addi	sp,sp,4
 280276c:	f800283a 	ret
 2802770:	014bc83a 	sub	r5,zero,r5
 2802774:	dfc00017 	ldw	ra,0(sp)
 2802778:	dec00104 	addi	sp,sp,4
 280277c:	280264c1 	jmpi	280264c <udivmodsi4>
 2802780:	0147c83a 	sub	r3,zero,r5
 2802784:	003ff306 	br	2802754 <__modsi3+0x2c>

02802788 <__udivsi3>:
 2802788:	000d883a 	mov	r6,zero
 280278c:	280264c1 	jmpi	280264c <udivmodsi4>

02802790 <__umodsi3>:
 2802790:	01800044 	movi	r6,1
 2802794:	280264c1 	jmpi	280264c <udivmodsi4>

02802798 <__mulsi3>:
 2802798:	20000a26 	beq	r4,zero,28027c4 <__mulsi3+0x2c>
 280279c:	0007883a 	mov	r3,zero
 28027a0:	2080004c 	andi	r2,r4,1
 28027a4:	1005003a 	cmpeq	r2,r2,zero
 28027a8:	2008d07a 	srli	r4,r4,1
 28027ac:	1000011e 	bne	r2,zero,28027b4 <__mulsi3+0x1c>
 28027b0:	1947883a 	add	r3,r3,r5
 28027b4:	294b883a 	add	r5,r5,r5
 28027b8:	203ff91e 	bne	r4,zero,28027a0 <__mulsi3+0x8>
 28027bc:	1805883a 	mov	r2,r3
 28027c0:	f800283a 	ret
 28027c4:	0007883a 	mov	r3,zero
 28027c8:	1805883a 	mov	r2,r3
 28027cc:	f800283a 	ret

028027d0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 28027d0:	defffd04 	addi	sp,sp,-12
 28027d4:	df000215 	stw	fp,8(sp)
 28027d8:	df000204 	addi	fp,sp,8
 28027dc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 28027e0:	e0bfff17 	ldw	r2,-4(fp)
 28027e4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 28027e8:	e0bffe17 	ldw	r2,-8(fp)
 28027ec:	1005003a 	cmpeq	r2,r2,zero
 28027f0:	1000021e 	bne	r2,zero,28027fc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 28027f4:	002af070 	cmpltui	zero,zero,43969
 28027f8:	00000106 	br	2802800 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 28027fc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 2802800:	e037883a 	mov	sp,fp
 2802804:	df000017 	ldw	fp,0(sp)
 2802808:	dec00104 	addi	sp,sp,4
 280280c:	f800283a 	ret

02802810 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2802810:	defffd04 	addi	sp,sp,-12
 2802814:	dfc00215 	stw	ra,8(sp)
 2802818:	df000115 	stw	fp,4(sp)
 280281c:	df000104 	addi	fp,sp,4
 2802820:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 2802824:	e13fff17 	ldw	r4,-4(fp)
 2802828:	28027d00 	call	28027d0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 280282c:	003fff06 	br	280282c <_exit+0x1c>
 2802830:	02802498 	cmpnei	r10,zero,146
